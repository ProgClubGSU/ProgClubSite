---
/**
 * =============================================================================
 * MEMBERS PAGE - MAIN DISPLAY CONTROLLER
 * =============================================================================
 * 
 * This page serves as the main orchestrator for displaying all club members.
 * It imports data and components from the modular structure we've built.
 * 
 * üèóÔ∏è  ARCHITECTURE OVERVIEW:
 * - Data: Imported from src/data/members.ts (easy to edit member info)
 * - Utilities: Imported from src/utils/memberUtils.ts (sorting and logic)
 * - Components: Uses src/components/MemberCard.astro (individual card display)
 * - Layout: Uses standard Layout wrapper with Section component
 * 
 * üéØ WHAT THIS FILE DOES:
 * 1. Imports member data and utility functions
 * 2. Sorts members by role priority within each academic year
 * 3. Renders year headers and member card grids
 * 4. Provides a call-to-action section at the bottom
 * 
 * üîß FOR FUTURE DEVELOPERS:
 * - To add members: Edit src/data/members.ts
 * - To change card styling: Edit src/components/MemberCard.astro  
 * - To modify sorting: Edit src/utils/memberUtils.ts
 * - To change page layout: Edit this file
 * 
 * üí° TESTING CHANGES:
 * - Run `npm run dev` and visit /members
 * - Check that sorting is correct within each year
 * - Verify special effects work on president cards
 * - Ensure responsive design works on mobile
 * =============================================================================
 */

// Layout and UI Components
import Layout from "@/layouts/Layout.astro";
import Section from "@/components/Section.astro";
import Breadcrumb from "@/components/Breadcrumb.astro";
import MemberCard from "@/components/MemberCard.astro";
import LiteMemberCard from "@/components/LiteMemberCard.astro";

// Data and Business Logic
import { membersByYear } from "@/data/members";
import { sortMembersByRole, separateMembersByDisplayType } from "@/utils/memberUtils";
import { DISCORD_LINK } from "@/consts";

// Sort all members by their role priority within each academic year
// This ensures Presidents appear first, then VPs, then other roles
const sortedMembers = sortMembersByRole(membersByYear);
---

<Layout
  title="Members - PROGgsu"
  description="Meet the amazing members of PROGgsu across the years. From founding members to current leadership, discover the people building GSU's programming community."
>
  <Fragment slot="breadcrumb">
    <div class="mb-6 mt-2">
      <nav class="flex items-center gap-2 text-white/80 text-sm" aria-label="Breadcrumb">
        <a href="/" class="hover:underline">Home</a>
        <span>/</span>
        <Breadcrumb title="Members" />
      </nav>
    </div>
  </Fragment>
  <Section title="Our Amazing Members" className="pt-16">
    <div class="max-w-7xl mx-auto">
      <div class="text-center mb-12">
        <p class="text-white/80 text-lg mt-6 max-w-3xl mx-auto leading-relaxed">
          Meet the incredible people who make PROGgsu possible! From our founding members who started this journey
          to our current leadership team, each person contributes to building GSU's vibrant programming community.
        </p>
      </div>

      <!-- Tab Navigation -->
      <div class="flex flex-wrap justify-center mb-12 gap-3">
        {Object.keys(sortedMembers).map((year, index) => (
          <button 
            class={`tab-btn px-4 md:px-6 py-2 md:py-3 rounded-lg border transition-all duration-300 font-medium text-sm md:text-base ${
              index === 0 
                ? 'bg-purple-600 text-white border-purple-600 shadow-lg shadow-purple-600/30' 
                : 'bg-transparent text-white border-white/30 hover:border-purple-400 hover:bg-purple-600/20 hover:text-purple-200'
            }`}
            data-tab={year}
            id={`tab-${year}`}
            role="tab"
            aria-selected={index === 0 ? "true" : "false"}
            aria-controls={`panel-${year}`}
          >
            {year}
          </button>
        ))}
      </div>

      <!-- Tab Content -->
      {Object.entries(sortedMembers).map(([year, members], index) => {
        const { fullCardMembers, liteCardMembers, listMembers } = separateMembersByDisplayType(members);
        return (
          <div 
            class={`tab-content ${index === 0 ? 'block' : 'hidden'}`}
            data-tab-content={year}
            role="tabpanel"
            id={`panel-${year}`}
            aria-labelledby={`tab-${year}`}
          >
            <!-- Member Count -->
            <div class="text-center mb-8">
              <p class="text-white/70 text-lg">
                {members.length} amazing member{members.length !== 1 ? 's' : ''}
              </p>
            </div>
            
            <!-- Full Animated Cards (Presidents, VPs, Advisors) -->
            {fullCardMembers.length > 0 && (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
                {fullCardMembers.map((member) => (
                  <MemberCard member={member} year={year} />
                ))}
              </div>
            )}
            
            <!-- Lite Cards (Mid-level roles) -->
            {liteCardMembers.length > 0 && (
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
                {liteCardMembers.map((member) => (
                  <LiteMemberCard member={member} year={year} />
                ))}
              </div>
            )}
            
            <!-- Simple Member List (Basic roles) -->
            {listMembers.length > 0 && (
              <div class="mt-8 mb-16">
                <h3 class="text-xl font-semibold text-white mb-6 text-center">
                  Additional Members
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-w-4xl mx-auto">
                  {listMembers.map((member) => (
                    <div class="bg-white/5 border border-white/10 rounded-lg p-4 backdrop-blur-sm hover:bg-white/10 transition-all duration-300">
                      <div class="flex items-center gap-3">
                        <div class="w-10 h-10 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center text-white font-bold text-sm">
                          {member.name.charAt(0)}
                        </div>
                        <div>
                          <h4 class="text-white font-medium text-sm">{member.name}</h4>
                          <p class="text-white/60 text-xs">{member.role}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        );
      })}

      <!-- Call to Action -->
      <div class="text-center mt-16 py-12 px-8 rounded-2xl border border-white/20 bg-gradient-to-br from-white/[0.08] via-white/[0.05] to-white/[0.02] backdrop-blur-md">
        <h3 class="text-3xl font-bold text-white mb-4 glow-pulse-title">
          Want to Join Our Team?
        </h3>
        <p class="text-white/80 text-lg mb-6 max-w-2xl mx-auto">
          We're always looking for passionate programmers to join our community! Whether you're a beginner 
          or experienced developer, there's a place for you in PROGgsu.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="/events" 
            class="px-8 py-3 rounded-lg bg-purple-600 hover:bg-purple-700 text-white font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg"
          >
            Check Out Our Events
          </a>
          <a 
            href={String(DISCORD_LINK)}
            target="_blank"
            class="px-8 py-3 rounded-lg border border-white/30 text-white hover:bg-white/10 font-medium transition-all duration-300 hover:scale-105"
          >
            <span>‚ù§Ô∏è Join Our Discord</span>
          </a>
        </div>
      </div>
    </div>
  </Section>
</Layout>

<style>
  /* Scroll performance optimizations */
  body {
    /* Optimize scroll behavior */
    scroll-behavior: smooth;
    /* Prevent horizontal overflow issues */
    overflow-x: hidden;
  }
  
  .glow-pulse-title {
    animation: titlePulse 2.5s infinite;
    /* GPU acceleration for title animations */
    transform: translateZ(0);
    will-change: text-shadow, color;
  }
  
  /* Tab styling and animations */
  .tab-btn {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }
  
  .tab-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(147, 51, 234, 0.3);
  }
  
  .tab-btn.active {
    background: linear-gradient(135deg, #7c3aed 0%, #a855f7 50%, #c084fc 100%);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(147, 51, 234, 0.4);
  }
  
  /* Smooth tab content transitions */
  .tab-content {
    animation: fadeIn 0.4s ease-in-out;
  }
  
  @keyframes fadeIn {
    from { 
      opacity: 0; 
      transform: translateY(10px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }

  @keyframes titlePulse {
    0%, 100% {
      text-shadow:
        0 0 6px rgba(59, 130, 246, 0.18),
        0 0 12px rgba(255, 255, 255, 0.10),
        0 0 24px rgba(59, 130, 246, 0.08);
      color: #fff;
    }
    50% {
      text-shadow:
        0 0 12px rgba(59, 130, 246, 0.22),
        0 0 24px rgba(255, 255, 255, 0.13),
        0 0 36px rgba(59, 130, 246, 0.10);
      color: #f4faff;
    }
  }
</style>

<script>
  /**
   * Academic Year Tab Navigation
   * Handles tab switching for better performance and UX
   */
  
  function initTabs() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    // Set first tab as active
    if (tabBtns.length > 0) {
      tabBtns[0].classList.add('active');
    }
    
    tabBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const targetYear = btn.getAttribute('data-tab');
        const targetContent = document.querySelector(`[data-tab-content="${targetYear}"]`);
        
        if (!targetContent) return;
        
        // Update button states
        tabBtns.forEach(b => {
          b.classList.remove('active');
          b.classList.remove('bg-purple-600', 'text-white', 'border-purple-600', 'shadow-lg', 'shadow-purple-600/30');
          b.classList.add('bg-transparent', 'text-white', 'border-white/30');
          b.setAttribute('aria-selected', 'false');
        });
        
        // Activate clicked tab
        btn.classList.add('active');
        btn.classList.add('bg-purple-600', 'text-white', 'border-purple-600', 'shadow-lg', 'shadow-purple-600/30');
        btn.classList.remove('bg-transparent', 'border-white/30');
        btn.setAttribute('aria-selected', 'true');
        
        // Update content visibility
        tabContents.forEach(content => {
          content.classList.add('hidden');
        });
        targetContent.classList.remove('hidden');
      });
    });
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTabs);
  } else {
    initTabs();
  }
  
  // Handle Astro page transitions
  document.addEventListener('astro:page-load', initTabs);
</script> 