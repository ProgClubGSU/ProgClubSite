---
import Layout from "@/layouts/Layout.astro";
import { DISCORD_LINK, SITE_TITLE } from "@/consts";
import { gettingInterviewGuides, passingInterviewGuides, additionalResources } from "@/data/gitpaid";
---

<Layout title={`Resources - ${SITE_TITLE}`} staticHeader={true}>
  <div class="min-h-screen bg-white">
    <!-- Custom Static Header for gitPAID -->
    <header class="bg-white border-b border-gray-200 sticky top-0 z-50">
      <div class="max-w-4xl mx-auto px-6 py-4 flex items-center justify-between">
        <!-- Left: Logo/Brand -->
        <div class="flex items-center space-x-3">
          <a href="/" class="text-xl font-bold text-gray-900 hover:text-gray-700 transition-colors">
            progsu
          </a>
          <span class="text-gray-300">/</span>
          <span class="text-lg font-semibold text-blue-600">gitPAID</span>
        </div>

        <!-- Right: Navigation -->
        <nav class="flex items-center space-x-6">
          <a href="/#events" class="text-sm text-gray-600 hover:text-gray-900 transition-colors">Events</a>
          <a href="/#about" class="text-sm text-gray-600 hover:text-gray-900 transition-colors">About</a>
          <a href={DISCORD_LINK} target="_blank" rel="noopener noreferrer" class="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition-colors">
            Join Discord
          </a>
        </nav>
      </div>
    </header>

    <!-- Content -->
    <div class="max-w-5xl mx-auto px-6 py-16">

        <!-- Hero Section -->
        <div class="mb-16 text-center">
          <h1 class="text-5xl font-bold text-gray-900 mb-4">gitPAID Resources</h1>
          <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
            Your complete roadmap to landing your first tech job. We break it down into two clear phases:
            <span class="font-semibold text-blue-600">getting the interview</span> and
            <span class="font-semibold text-green-600">passing the interview</span>.
          </p>
        </div>

        <!-- Job Search Process Diagram -->
        <div class="mb-20 bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-200 rounded-xl p-8 shadow-lg">
          <svg viewBox="0 0 800 280" class="w-full h-auto" xmlns="http://www.w3.org/2000/svg">
            <!-- Phase 1: Getting the Interview -->
            <g>
              <!-- Box -->
              <rect x="30" y="30" width="360" height="220" rx="16" fill="#3B82F6" stroke="#1E40AF" stroke-width="4"/>

              <!-- Title -->
              <text x="210" y="110" text-anchor="middle" fill="white" font-size="26" font-weight="bold">Getting the Interview</text>

              <!-- Icons/Keywords -->
              <text x="210" y="160" text-anchor="middle" fill="#DBEAFE" font-size="17">Resume • Networking</text>
              <text x="210" y="190" text-anchor="middle" fill="#DBEAFE" font-size="17">Referrals • Applications</text>
            </g>

            <!-- Phase 2: Passing the Interview -->
            <g>
              <!-- Box -->
              <rect x="410" y="30" width="360" height="220" rx="16" fill="#10B981" stroke="#047857" stroke-width="4"/>

              <!-- Title -->
              <text x="590" y="110" text-anchor="middle" fill="white" font-size="26" font-weight="bold">Passing the Interview</text>

              <!-- Icons/Keywords -->
              <text x="590" y="160" text-anchor="middle" fill="#D1FAE5" font-size="17">Coding • Behavioral</text>
              <text x="590" y="190" text-anchor="middle" fill="#D1FAE5" font-size="17">System Design • Culture Fit</text>
            </g>
          </svg>
        </div>

        <!-- Getting the Interview -->
        <section id="getting-interview" class="mb-20 scroll-mt-24">
          <div class="mb-8">
            <h2 class="text-3xl font-bold text-gray-900 mb-3 flex items-center">
              <span class="bg-blue-100 rounded-xl p-3 mr-3">
                <svg class="w-7 h-7 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
              </span>
              Getting the Interview
            </h2>
            <p class="text-gray-600 text-lg">Build your foundation with resume optimization, networking strategies, and referral tactics.</p>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {gettingInterviewGuides.map((resource) => {
              const isExternal = resource.url && (resource.url.startsWith('http') || resource.url.startsWith('https'));
              const Component = resource.url && resource.url !== '#' ? 'a' : 'div';
              const linkProps = resource.url && resource.url !== '#' ? {
                href: resource.url,
                target: isExternal ? '_blank' : undefined,
                rel: isExternal ? 'noopener noreferrer' : undefined
              } : {};

              return (
                <Component
                  {...linkProps}
                  class={`block border-2 border-gray-200 rounded-xl p-5 transition-all ${resource.url && resource.url !== '#' ? 'hover:border-blue-400 hover:shadow-md hover:-translate-y-1 cursor-pointer bg-white' : 'bg-gray-50'}`}
                >
                  <div class="flex items-center justify-between mb-3">
                    <h3 class={`font-bold text-base ${resource.url && resource.url !== '#' ? 'text-blue-600' : 'text-gray-500'}`}>
                      {resource.title}
                    </h3>
                    {resource.url === '#' && (
                      <span class="text-xs px-3 py-1 bg-gray-200 text-gray-600 rounded-full font-medium">Coming Soon</span>
                    )}
                  </div>
                  <p class="text-gray-600 text-sm leading-relaxed">{resource.description}</p>
                </Component>
              );
            })}
          </div>
        </section>

        <!-- Passing the Interview -->
        <section id="passing-interview" class="mb-20 scroll-mt-24">
          <div class="mb-8">
            <h2 class="text-3xl font-bold text-gray-900 mb-3 flex items-center">
              <span class="bg-green-100 rounded-xl p-3 mr-3">
                <svg class="w-7 h-7 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
              </span>
              Passing the Interview
            </h2>
            <p class="text-gray-600 text-lg">Master technical skills, behavioral questions, and interview strategies to ace every round.</p>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {passingInterviewGuides.map((resource) => {
              const isExternal = resource.url && (resource.url.startsWith('http') || resource.url.startsWith('https'));
              const Component = resource.url && resource.url !== '#' ? 'a' : 'div';
              const linkProps = resource.url && resource.url !== '#' ? {
                href: resource.url,
                target: isExternal ? '_blank' : undefined,
                rel: isExternal ? 'noopener noreferrer' : undefined
              } : {};

              return (
                <Component
                  {...linkProps}
                  class={`block border-2 border-gray-200 rounded-xl p-5 transition-all ${resource.url && resource.url !== '#' ? 'hover:border-green-400 hover:shadow-md hover:-translate-y-1 cursor-pointer bg-white' : 'bg-gray-50'}`}
                >
                  <div class="flex items-center justify-between mb-3">
                    <h3 class={`font-bold text-base ${resource.url && resource.url !== '#' ? 'text-green-600' : 'text-gray-500'}`}>
                      {resource.title}
                    </h3>
                    {resource.url === '#' && (
                      <span class="text-xs px-3 py-1 bg-gray-200 text-gray-600 rounded-full font-medium">Coming Soon</span>
                    )}
                  </div>
                  <p class="text-gray-600 text-sm leading-relaxed">{resource.description}</p>
                </Component>
              );
            })}
          </div>
        </section>

        <!-- Additional Resources -->
        <section id="additional-resources" class="mb-16 scroll-mt-24">
          <div class="mb-10">
            <h2 class="text-3xl font-bold text-gray-900 mb-3 flex items-center">
              <span class="bg-purple-100 rounded-xl p-3 mr-3">
                <svg class="w-7 h-7 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
                </svg>
              </span>
              Additional Resources
            </h2>
            <p class="text-gray-600 text-lg">Curated tools and platforms to support every step of your job search journey.</p>
          </div>

          {additionalResources.map((category, index) => {
            // Define SVG icons for each category
            const categoryIcons = {
              'job-boards': (
                <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                </svg>
              ),
              'interview-prep': (
                <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
              ),
              'resume-portfolio': (
                <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
              ),
              'learning-platforms': (
                <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                </svg>
              )
            };

            return (
            <div class="mb-4 border-2 border-gray-200 rounded-xl overflow-hidden shadow-sm hover:shadow-md transition-shadow">
              <button
                class="resource-category-toggle w-full flex items-center justify-between p-5 bg-gradient-to-r from-gray-50 to-gray-100 hover:from-gray-100 hover:to-gray-200 transition-all"
                data-category-id={category.id}
                aria-expanded="false"
              >
                <h3 class="text-xl font-bold text-gray-900 flex items-center">
                  <span class="mr-3 text-gray-600">{categoryIcons[category.id]}</span>
                  {category.title}
                  <span class="ml-3 text-sm text-gray-500 font-normal bg-white px-3 py-1 rounded-full">{category.resources.length} resources</span>
                </h3>
                <svg
                  class="category-chevron w-6 h-6 text-gray-600 transform transition-transform duration-300"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M19 9l-7 7-7-7"/>
                </svg>
              </button>

              <div class="resource-category-content hidden" data-category-id={category.id}>
                <ul class="p-5 space-y-3 bg-white">
                  {category.resources
                    .sort((a, b) => {
                      const tierOrder = { 'S+': -1, 'S': 0, 'A': 1, 'B': 2, 'C': 3 };
                      return tierOrder[a.tier] - tierOrder[b.tier];
                    })
                    .map((resource) => {
                      const tierColors = {
                        'S+': 'bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 text-white border-purple-600 shadow-lg shadow-purple-500/50',
                        'S': 'bg-gradient-to-r from-yellow-400 to-orange-500 text-white border-yellow-500',
                        'A': 'bg-gradient-to-r from-green-400 to-emerald-500 text-white border-green-500',
                        'B': 'bg-gradient-to-r from-blue-400 to-cyan-500 text-white border-blue-500',
                        'C': 'bg-gradient-to-r from-gray-400 to-slate-500 text-white border-gray-500'
                      };
                      const tierColor = tierColors[resource.tier];

                      return (
                        <li class="border-2 border-gray-100 rounded-lg p-4 hover:border-blue-300 hover:shadow-sm transition-all bg-white">
                          <a href={resource.url} target="_blank" rel="noopener noreferrer" class="block">
                            <div class="flex items-center gap-4">
                              <span class={`${tierColor} px-3 py-1.5 rounded-lg text-xs font-bold shadow-sm border flex-shrink-0`}>
                                {resource.tier}
                              </span>
                              <div class="flex-1">
                                <div class="font-semibold text-blue-600 text-base mb-1">{resource.title}</div>
                                <p class="text-sm text-gray-600 leading-relaxed">{resource.description}</p>
                              </div>
                            </div>
                          </a>
                        </li>
                      );
                    })}
                </ul>
              </div>
            </div>
            );
          })}
        </section>


        <!-- Footer -->
        <footer class="mt-20 pt-8 border-t-2 border-gray-200">
          <div class="text-center">
            <p class="text-base text-gray-600 mb-2">Part of <span class="font-semibold text-gray-900">progsu</span>'s commitment to helping students land their first tech job.</p>
            <p class="text-base text-gray-600">
              Questions? Join our
              <a href={DISCORD_LINK} target="_blank" class="text-blue-600 hover:text-blue-700 font-semibold underline decoration-2 underline-offset-2">
                Discord community
              </a>
            </p>
          </div>
        </footer>
      </div>
    </div>
</Layout>

<style>
  /* Disable cursor and background glow effects on gitPAID page, keep binary trail */
  #cursor-glow {
    display: none !important;
    opacity: 0 !important;
    visibility: hidden !important;
  }

  #bg-glow {
    display: none !important;
    opacity: 0 !important;
    visibility: hidden !important;
  }

  .cursor-glow {
    display: none !important;
    opacity: 0 !important;
    visibility: hidden !important;
  }
</style>

<script>
  // Additional JavaScript to ensure glow effects are disabled
  document.addEventListener('DOMContentLoaded', function() {
    const cursorGlow = document.getElementById('cursor-glow');
    const bgGlow = document.getElementById('bg-glow');

    if (cursorGlow) {
      cursorGlow.style.display = 'none';
      cursorGlow.style.opacity = '0';
      cursorGlow.style.visibility = 'hidden';
    }

    if (bgGlow) {
      bgGlow.style.display = 'none';
      bgGlow.style.opacity = '0';
      bgGlow.style.visibility = 'hidden';
    }
  });

  // Override any cursor effects that might be set by the main layout
  document.addEventListener('mousemove', function(e) {
    const cursorGlow = document.getElementById('cursor-glow');
    const bgGlow = document.getElementById('bg-glow');

    if (cursorGlow) {
      cursorGlow.style.display = 'none';
      cursorGlow.style.opacity = '0';
    }

    if (bgGlow) {
      bgGlow.style.display = 'none';
      bgGlow.style.opacity = '0';
    }
  });

  // Accordion functionality for additional resources
  document.querySelectorAll('.resource-category-toggle').forEach(button => {
    button.addEventListener('click', function() {
      const categoryId = this.getAttribute('data-category-id');
      const content = document.querySelector(`.resource-category-content[data-category-id="${categoryId}"]`);
      const chevron = this.querySelector('.category-chevron');
      const isExpanded = this.getAttribute('aria-expanded') === 'true';

      if (isExpanded) {
        // Collapse
        content.classList.add('hidden');
        this.setAttribute('aria-expanded', 'false');
        chevron.style.transform = 'rotate(0deg)';
      } else {
        // Expand
        content.classList.remove('hidden');
        this.setAttribute('aria-expanded', 'true');
        chevron.style.transform = 'rotate(180deg)';
      }
    });
  });
</script> 