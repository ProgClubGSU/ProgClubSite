---
import { getEvents, getEvent, renderPortableText } from "@/lib/sanity.js";
import BlogPost from "@/layouts/BlogPost.astro";
import Breadcrumb from "@/components/Breadcrumb.astro";

export async function getStaticPaths() {
  const events = await getEvents();
  return events.map((event) => ({
    params: { slug: event.slug.current },
    props: { event },
  }));
}

const { event } = Astro.props;
const descriptionHtml = renderPortableText(event.description);
const postHtml = renderPortableText(event.post);

// Helper function to get event status
function getEventStatus(date) {
  if (!date) return 'tbd';
  
  const now = new Date();
  const eventDate = new Date(date);
  
  // Ensure we have valid dates
  if (isNaN(eventDate.getTime())) return 'tbd';
  
  eventDate.setHours(0, 0, 0, 0);
  const today = new Date(now);
  today.setHours(0, 0, 0, 0);
  
  if (eventDate < today) return 'past';
  if (eventDate.getTime() === today.getTime()) return 'active';
  return 'upcoming';
}

const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
const eventStatus = getEventStatus(eventDate);
---

<BlogPost 
  title={event.title}
  description={typeof event.description === 'string' ? event.description : 'Event description'}
  pubDate={eventDate}
  resources={event.resources}
>
  <Fragment slot="breadcrumb">
    <div class="mb-6 mt-2">
      <nav class="flex items-center gap-2 text-white/80 text-sm" aria-label="Breadcrumb">
        <a href="/" class="hover:underline">Home</a>
        <span>/</span>
        <a href="/events" class="hover:underline">Events</a>
        <span>/</span>
        <Breadcrumb title={event.title} />
      </nav>
    </div>
  </Fragment>

  <!-- Article Header -->
  <div class="max-w-4xl mx-auto mb-12 px-4 w-full">
    <article class="relative w-full overflow-hidden">
      <!-- Event Title -->
      <header class="text-center mb-8 w-full overflow-hidden">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4 leading-tight break-words w-full">
          {event.title}
        </h1>
        {event.description && typeof event.description === 'string' && (
          <p class="text-xl text-white/80 leading-relaxed max-w-3xl mx-auto">
            {event.description}
          </p>
        )}
        
        <!-- Special Tags - moved here below title -->
        {event.specialTags && event.specialTags.length > 0 && (
          <div class="flex flex-wrap gap-2 justify-center mt-4">
            {event.specialTags.map((tag) => (
              <span class="bg-purple-500/20 border border-purple-400/30 text-purple-300 px-3 py-1 rounded-full text-sm font-medium">
                {typeof tag === 'string' ? tag : (tag?.title || tag?.name || String(tag))}
              </span>
            ))}
          </div>
        )}
      </header>

      <!-- Event Meta Information -->
      <div class="bg-white/5 border border-white/10 rounded-xl p-6 backdrop-blur-sm mb-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="flex flex-col items-center text-center">
            <div class="flex items-center gap-2 mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span class="text-sm text-white/70 uppercase tracking-wide font-medium">Date</span>
            </div>
            <div class="text-lg font-bold text-white">
              {event.date?.isTBD ? 'TBD' : (event.date?.value ? new Date(event.date.value).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' }) : 'TBA')}
            </div>
          </div>
          
          <div class="flex flex-col items-center text-center">
            <div class="flex items-center gap-2 mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span class="text-sm text-white/70 uppercase tracking-wide font-medium">Time</span>
            </div>
            <div class="text-lg font-bold text-white">
              {event.time?.isTBD ? 'TBD' : (event.time?.value || 'TBA')}
            </div>
          </div>
          
          <div class="flex flex-col items-center text-center">
            <div class="flex items-center gap-2 mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 12.414a4 4 0 10-1.414 1.414l4.243 4.243a1 1 0 001.414-1.414z" />
              </svg>
              <span class="text-sm text-white/70 uppercase tracking-wide font-medium">Location</span>
            </div>
            <div class="text-lg font-bold text-white">
              {event.location?.isTBD ? 'TBD' : (event.location?.value || 'TBA')}
            </div>
          </div>
        </div>
      </div>
    </article>
  </div>

  <!-- Table of Contents (if content is long) -->
  {((event.description && typeof event.description === 'object') || event.post || (event.gallery && event.gallery.length > 0)) && (
    <div class="max-w-4xl mx-auto mb-6 px-4">
      <div class="bg-white/5 border border-white/10 rounded-xl p-6 backdrop-blur-sm">
        <h3 class="text-lg font-bold text-white mb-4 flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
          </svg>
          Table of Contents
        </h3>
        <nav class="space-y-2">
          {event.description && typeof event.description === 'object' && (
            <a href="#event-details" class="block text-blue-300 hover:text-blue-200 transition-colors duration-300">
              üìã Event Details
            </a>
          )}
          {event.gallery && event.gallery.length > 0 && (
            <a href="#event-gallery" class="block text-blue-300 hover:text-blue-200 transition-colors duration-300">
              üì∏ Event Gallery
            </a>
          )}
          {event.post && (
            <a href="#event-recap" class="block text-blue-300 hover:text-blue-200 transition-colors duration-300">
              üìù Event Recap
            </a>
          )}
        </nav>
      </div>
    </div>
  )}

  <!-- Event Details Section -->
  {event.description && typeof event.description === 'object' && descriptionHtml && (
    <div id="event-details" class="max-w-4xl mx-auto mb-12">
      <div class="bg-white/5 border border-white/10 rounded-xl p-8 backdrop-blur-sm">
        <h2 class="text-3xl font-bold text-white mb-6 flex items-center gap-3">
          <svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Event Details
        </h2>
        <div class="prose prose-lg prose-invert max-w-none [&>*:last-child]:mb-0 [&>p:last-child]:mb-0 [&>p]:text-white/90 [&>p]:leading-relaxed [&>p]:text-lg [&>h1]:text-white [&>h1]:text-3xl [&>h1]:font-bold [&>h1]:mb-4 [&>h2]:text-white [&>h2]:text-2xl [&>h2]:font-bold [&>h2]:mb-3 [&>h3]:text-white [&>h3]:text-xl [&>h3]:font-bold [&>h3]:mb-2 [&>h4]:text-white [&>h4]:text-lg [&>h4]:font-bold [&>h4]:mb-2 [&>strong]:text-white [&>strong]:font-bold [&>em]:text-white/90 [&>em]:italic [&>ul]:text-white/90 [&>ul]:list-disc [&>ul]:pl-6 [&>ul]:mb-4 [&>ol]:text-white/90 [&>ol]:list-decimal [&>ol]:pl-6 [&>ol]:mb-4 [&>li]:text-white/90 [&>li]:mb-1 [&>a]:text-blue-300 [&>a]:underline [&>a]:hover:text-blue-200 [&>blockquote]:border-l-4 [&>blockquote]:border-white/30 [&>blockquote]:pl-4 [&>blockquote]:italic [&>blockquote]:text-white/80 [&>code]:bg-white/10 [&>code]:px-1 [&>code]:py-0.5 [&>code]:rounded [&>code]:text-sm [&>pre]:bg-white/10 [&>pre]:p-4 [&>pre]:rounded-lg [&>pre]:overflow-x-auto" set:html={descriptionHtml} />
      </div>
    </div>
  )}

  <!-- Event Gallery Section -->
  {event.gallery && event.gallery.length > 0 && (
    <div id="event-gallery" class="max-w-4xl mx-auto mb-12">
      <div class="bg-white/5 border border-white/10 rounded-xl p-8 backdrop-blur-sm">
        <h3 class="text-3xl font-bold text-white mb-6 flex items-center gap-3">
          <svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
          Event Gallery
        </h3>
        <div class="image-slideshow relative w-full max-w-2xl mx-auto">
          {/* Main Image Container */}
          <div class="slideshow-viewport relative w-full h-64 md:h-80 lg:h-96 rounded-xl overflow-hidden shadow-2xl">
            {event.gallery.map((img, index) => (
              img.asset?.url && (
                <div
                  class={`slide absolute inset-0 transition-all duration-700 ease-in-out ${
                    index === 0 ? 'opacity-100 scale-100' : 'opacity-0 scale-95'
                  }`}
                  data-slide={index}
                >
                  <img
                    src={img.asset.url}
                    alt={img.alt || `${event.title} - Image ${index + 1}`}
                    class="w-full h-full object-cover object-center rounded-xl"
                    style="margin: 0.5rem; width: calc(100% - 1rem); height: calc(100% - 1rem);"
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                  
                  {/* Navigation Arrows - Inside each slide */}
                  {event.gallery.length > 1 && (
                    <>
                      <button 
                        class="slideshow-nav-btn slideshow-prev absolute left-3 top-1/2 -translate-y-1/2 z-20 w-10 h-10 bg-white/[0.1] hover:bg-white/[0.2] text-white rounded-full flex items-center justify-center transition-all duration-300 backdrop-blur-md border border-white/30 hover:scale-110 hover:shadow-lg"
                        aria-label="Previous image"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                      </button>
                      <button 
                        class="slideshow-nav-btn slideshow-next absolute right-3 top-1/2 -translate-y-1/2 z-20 w-10 h-10 bg-white/[0.1] hover:bg-white/[0.2] text-white rounded-full flex items-center justify-center transition-all duration-300 backdrop-blur-md border border-white/30 hover:scale-110 hover:shadow-lg"
                        aria-label="Next image"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                      </button>
                    </>
                  )}
                  
                  {/* Image Counter - Inside each slide */}
                  {event.gallery.length > 1 && (
                    <div class="absolute top-4 right-4 z-20 bg-white/[0.1] text-white text-sm px-3 py-1.5 rounded-full backdrop-blur-md border border-white/30 shadow-sm">
                      <span class="slideshow-counter">1</span> / <span class="slideshow-total">{event.gallery.length}</span>
                    </div>
                  )}
                  
                </div>
              )
            ))}
            
            {/* Navigation Dots - Single set positioned as overlay */}
            {event.gallery.length > 1 && (
              <div class="slideshow-dots absolute bottom-6 left-1/2 -translate-x-1/2 z-20 flex gap-2">
                {event.gallery.map((_, dotIndex) => (
                  <button
                    class={`slideshow-dot w-3 h-3 rounded-full transition-all duration-300 cursor-pointer backdrop-blur-sm border border-white/20 ${
                      dotIndex === 0 
                        ? 'bg-green-400 scale-110 shadow-lg' 
                        : 'bg-white/50 hover:bg-white/70 hover:scale-110 hover:shadow-md'
                    }`}
                    data-slide={dotIndex}
                    aria-label={`Go to image ${dotIndex + 1}`}
                  ></button>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )}

  <!-- Event Recap Section -->
  {event.post && (
    <div id="event-recap" class="max-w-4xl mx-auto mb-12">
      <div class="bg-white/5 border border-white/10 rounded-xl p-8 backdrop-blur-sm">
        <h2 class="text-3xl font-bold text-white mb-6 flex items-center gap-3">
          <svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
          </svg>
          Event Recap
        </h2>
        <div class="prose prose-lg prose-invert max-w-none [&>*:last-child]:mb-0 [&>p:last-child]:mb-0 [&>p]:text-white/90 [&>p]:leading-relaxed [&>p]:text-lg [&>h1]:text-white [&>h1]:text-3xl [&>h1]:font-bold [&>h1]:mb-4 [&>h2]:text-white [&>h2]:text-2xl [&>h2]:font-bold [&>h2]:mb-3 [&>h3]:text-white [&>h3]:text-xl [&>h3]:font-bold [&>h3]:mb-2 [&>h4]:text-white [&>h4]:text-lg [&>h4]:font-bold [&>h4]:mb-2 [&>strong]:text-white [&>strong]:font-bold [&>em]:text-white/90 [&>em]:italic [&>ul]:text-white/90 [&>ul]:list-disc [&>ul]:pl-6 [&>ul]:mb-4 [&>ol]:text-white/90 [&>ol]:list-decimal [&>ol]:pl-6 [&>ol]:mb-4 [&>li]:text-white/90 [&>li]:mb-1 [&>a]:text-blue-300 [&>a]:underline [&>a]:hover:text-blue-200 [&>blockquote]:border-l-4 [&>blockquote]:border-white/30 [&>blockquote]:pl-4 [&>blockquote]:italic [&>blockquote]:text-white/80 [&>code]:bg-white/10 [&>code]:px-1 [&>code]:py-0.5 [&>code]:rounded [&>code]:text-sm [&>pre]:bg-white/10 [&>pre]:p-4 [&>pre]:rounded-lg [&>pre]:overflow-x-auto" set:html={postHtml} />
      </div>
    </div>
  )}

  <!-- Related Events Section -->
  <div class="max-w-4xl mx-auto mb-12">
    <div class="bg-white/5 border border-white/10 rounded-xl p-8 backdrop-blur-sm">
      <h3 class="text-2xl font-bold text-white mb-6 flex items-center gap-3">
        <svg class="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
        </svg>
        More Events
      </h3>
      <div class="flex flex-col sm:flex-row gap-4">
        <a href="/events" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 text-center">
          View All Events
        </a>
        <a href="/contact" class="bg-white/10 hover:bg-white/20 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-300 border border-white/20 text-center">
          Contact Us
        </a>
      </div>
    </div>
  </div>
</BlogPost>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const slideshow = document.querySelector('.image-slideshow');
    if (!slideshow) return;

    const slides = slideshow.querySelectorAll('.slide');
    const dots = slideshow.querySelectorAll('.slideshow-dot');
    const prevBtns = slideshow.querySelectorAll('.slideshow-prev');
    const nextBtns = slideshow.querySelectorAll('.slideshow-next');
    const counters = slideshow.querySelectorAll('.slideshow-counter');
    
    let currentSlide = 0;
    let interval;
    let isTransitioning = false;

    function updateSlide(index) {
      if (isTransitioning) return;
      isTransitioning = true;
      
      // Update slides
      slides.forEach((slide, i) => {
        if (i === index) {
          slide.classList.remove('opacity-0', 'scale-95');
          slide.classList.add('opacity-100', 'scale-100');
        } else {
          slide.classList.remove('opacity-100', 'scale-100');
          slide.classList.add('opacity-0', 'scale-95');
        }
      });

      // Update dots
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.remove('bg-white/50', 'hover:bg-white/70', 'hover:shadow-md');
          dot.classList.add('bg-green-400', 'scale-110', 'shadow-lg');
        } else {
          dot.classList.remove('bg-green-400', 'scale-110', 'shadow-lg');
          dot.classList.add('bg-white/50', 'hover:bg-white/70', 'hover:shadow-md');
        }
      });

      // Update counters
      counters.forEach(counter => {
        counter.textContent = index + 1;
      });

      currentSlide = index;
      
      // Reset transition flag after animation
      setTimeout(() => {
        isTransitioning = false;
      }, 700);
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      updateSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      updateSlide(prev);
    }

    // Auto-advance
    if (slides.length > 1) {
      interval = setInterval(nextSlide, 5000);
    }

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        clearInterval(interval);
        updateSlide(index);
        // Restart auto-advance
        interval = setInterval(nextSlide, 5000);
      });
    });

    // Arrow navigation
    prevBtns.forEach(prevBtn => {
      prevBtn.addEventListener('click', () => {
        clearInterval(interval);
        prevSlide();
        interval = setInterval(nextSlide, 5000);
      });
    });

    nextBtns.forEach(nextBtn => {
      nextBtn.addEventListener('click', () => {
        clearInterval(interval);
        nextSlide();
        interval = setInterval(nextSlide, 5000);
      });
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (slides.length > 1) {
        if (e.key === 'ArrowLeft') {
          clearInterval(interval);
          prevSlide();
          interval = setInterval(nextSlide, 5000);
        } else if (e.key === 'ArrowRight') {
          clearInterval(interval);
          nextSlide();
          interval = setInterval(nextSlide, 5000);
        }
      }
    });

    // Pause on hover
    slideshow.addEventListener('mouseenter', () => {
      if (slides.length > 1) {
        clearInterval(interval);
      }
    });
    
    slideshow.addEventListener('mouseleave', () => {
      if (slides.length > 1) {
        interval = setInterval(nextSlide, 5000);
      }
    });

    // Touch/swipe support for mobile
    let touchStartX = 0;
    let touchEndX = 0;

    slideshow.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });

    slideshow.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });

    function handleSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          // Swipe left - next slide
          clearInterval(interval);
          nextSlide();
          interval = setInterval(nextSlide, 5000);
        } else {
          // Swipe right - previous slide
          clearInterval(interval);
          prevSlide();
          interval = setInterval(nextSlide, 5000);
        }
      }
    }
  });
</script>
