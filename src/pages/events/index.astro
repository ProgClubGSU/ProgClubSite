---
import { getEvents, renderPortableText } from "@/lib/sanity.js";
import BlogPostCard from "@/components/BlogPostCard.astro";
import LiteEventCard from "@/components/LiteEventCard.astro";
import EventArticleCard from "@/components/EventArticleCard.astro";
import Section from "@/components/Section.astro";
import Layout from "@/layouts/Layout.astro";
import Breadcrumb from "@/components/Breadcrumb.astro";
import { separateEventsByDisplayType, sortEventsByPriority, type Event } from "@/utils/eventUtils";
import { SOCIAL_LINKS } from "@/consts";

const rawEvents = await getEvents();

// Helper function to extract plain text from description
function getPlainTextExcerpt(description) {
  if (typeof description === 'string') return description;
  if (!description || !Array.isArray(description)) return '';
  
  // Extract text from block content
  return description
    .filter(block => block._type === 'block')
    .map(block => 
      block.children
        ?.filter(child => child._type === 'span')
        ?.map(span => span.text)
        ?.join('') || ''
    )
    .join(' ')
    .substring(0, 150) + '...';
}

// Helper function to determine event status
function getEventStatus(date) {
  if (!date) return 'tbd'; // Changed from 'upcoming' to 'tbd'
  
  const now = new Date();
  const eventDate = new Date(date);
  
  // Ensure we have valid dates
  if (isNaN(eventDate.getTime())) return 'tbd';
  
  // Set event date to start of day for comparison
  eventDate.setHours(0, 0, 0, 0);
  const today = new Date(now);
  today.setHours(0, 0, 0, 0);
  
  // Debug logging removed for production
  
  if (eventDate < today) return 'past';
  if (eventDate.getTime() === today.getTime()) return 'active';
  return 'upcoming';
}

// Helper function to group events by time period
function groupEventsByTime(events) {
  const now = new Date();
  const today = new Date(now);
  today.setHours(0, 0, 0, 0);
  
  const thisWeek = new Date(today);
  thisWeek.setDate(today.getDate() + 7);
  
  const thisMonth = new Date(today);
  thisMonth.setMonth(today.getMonth() + 1);
  
  const groups = {
    featured: [],
    thisWeek: [],
    thisMonth: [],
    upcoming: [],
    past: []
  };
  
  events.forEach(event => {
    const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
    const status = getEventStatus(eventDate);
    
    // Handle featured events: pinned, happening today, or have "featured" tag
    const hasFeaturedTag = event.specialTags && event.specialTags.some(tag => 
      (typeof tag === 'string' && tag.toLowerCase() === 'featured') || 
      (typeof tag === 'object' && (tag?.name?.toLowerCase() === 'featured' || tag?.title?.toLowerCase() === 'featured'))
    );
    
    if (event.pinned || status === 'active' || hasFeaturedTag) {
      groups.featured.push(event);
    } else if (status === 'past') {
      groups.past.push(event);
    } else if (status === 'tbd') {
      // TBD events go to upcoming but are treated specially
      groups.upcoming.push(event);
    } else if (eventDate && eventDate <= thisWeek) {
      groups.thisWeek.push(event);
    } else if (eventDate && eventDate <= thisMonth) {
      groups.thisMonth.push(event);
    } else if (status === 'upcoming') {
      // Future events beyond this month
      groups.upcoming.push(event);
    }
  });
  
  return groups;
}

// Convert raw events to Event type and sort by priority
const events: Event[] = rawEvents.map(event => ({
  ...event,
  slug: { current: event.slug.current }
}));

const sortedEvents = sortEventsByPriority(events);
const eventGroups = groupEventsByTime(sortedEvents);

// Debug logging removed for production

// Separate events into three display tiers for performance
const { fullCardEvents, liteCardEvents, listEvents } = separateEventsByDisplayType(sortedEvents);

// Social buttons for Stay Updated section
const socialButtons = [
  { key: "discord", label: "Join Discord", href: SOCIAL_LINKS.discord },
  { key: "email", label: "Email Us", href: SOCIAL_LINKS.email },
  { key: "linkedin", label: "LinkedIn", href: SOCIAL_LINKS.linkedin },
  { key: "instagram", label: "Instagram", href: SOCIAL_LINKS.instagram },
].filter((btn) => Boolean(btn.href));
---

<Layout title="Events">
  <Fragment slot="breadcrumb">
    <div class="mb-6 mt-2">
      <nav class="flex items-center gap-2 text-white/80 text-sm" aria-label="Breadcrumb">
        <a href="/" class="hover:underline">Home</a>
        <span>/</span>
        <Breadcrumb title="Events" />
      </nav>
    </div>
  </Fragment>
  
  <Section title="Events" className="pt-16">
    <!-- Article Introduction -->
    <div class="max-w-4xl mx-auto mb-12">
      <div class="text-center mb-8">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">Programming Club Events</h1>
        <p class="text-xl text-white/80 leading-relaxed max-w-3xl mx-auto">
          Join us for workshops, hackathons, guest speakers, and networking events. 
          Beginner or an experienced developer, there's something for everyone.
        </p>
      </div>
      
      <!-- Quick Stats -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white/5 border border-white/10 rounded-lg p-6 text-center backdrop-blur-sm">
          <div class="text-3xl font-bold text-green-400 mb-2">{eventGroups.thisWeek.length + eventGroups.thisMonth.length + eventGroups.upcoming.length}</div>
          <div class="text-white/70">Upcoming Events</div>
        </div>
        <div class="bg-white/5 border border-white/10 rounded-lg p-6 text-center backdrop-blur-sm">
          <div class="text-3xl font-bold text-blue-400 mb-2">{eventGroups.featured.length}</div>
          <div class="text-white/70">Featured Events</div>
        </div>
        <div class="bg-white/5 border border-white/10 rounded-lg p-6 text-center backdrop-blur-sm">
          <div class="text-3xl font-bold text-purple-400 mb-2">{eventGroups.past.length}</div>
          <div class="text-white/70">Past Events</div>
        </div>
      </div>
    </div>

    <!-- Featured Events Section -->
    {eventGroups.featured.length > 0 && (
      <div class="mb-16">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-3xl font-bold text-white mb-8 text-center border-b border-white/20 pb-4">
            <span class="bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
              Featured Events
            </span>
          </h2>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {eventGroups.featured.map((event) => {
              const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
              return (
                <BlogPostCard
                  slug={event.slug.current}
                  title={event.title}
                  excerpt={getPlainTextExcerpt(event.description)}
                  date={eventDate}
                  time={event.time?.isTBD ? null : event.time?.value}
                  location={event.location?.isTBD ? null : event.location?.value}
                  status={getEventStatus(eventDate)}
                  pinned={event.pinned || false}
                  specialTags={event.specialTags || []}
                  resources={event.resources}
                />
              );
            })}
          </div>
        </div>
      </div>
    )}

    <!-- This Week's Events -->
    {eventGroups.thisWeek.length > 0 && (
      <div class="mb-16">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-3xl font-bold text-white mb-8 text-center border-b border-white/20 pb-4">
            <span class="bg-gradient-to-r from-orange-400 to-red-400 bg-clip-text text-transparent">
              This Week
            </span>
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {eventGroups.thisWeek.map((event) => {
              const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
              return (
                <EventArticleCard
                  slug={event.slug.current}
                  title={event.title}
                  excerpt={getPlainTextExcerpt(event.description)}
                  date={eventDate}
                  time={event.time?.isTBD ? null : event.time?.value}
                  location={event.location?.isTBD ? null : event.location?.value}
                  status={getEventStatus(eventDate)}
                  pinned={event.pinned || false}
                  specialTags={event.specialTags || []}
                  resources={event.resources}
                />
              );
            })}
          </div>
        </div>
      </div>
    )}

    <!-- This Month's Events -->
    {eventGroups.thisMonth.length > 0 && (
      <div class="mb-16">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-3xl font-bold text-white mb-8 text-center border-b border-white/20 pb-4">
            <span class="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              This Month
            </span>
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {eventGroups.thisMonth.map((event) => {
              const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
              return (
                <EventArticleCard
                  slug={event.slug.current}
                  title={event.title}
                  excerpt={getPlainTextExcerpt(event.description)}
                  date={eventDate}
                  time={event.time?.isTBD ? null : event.time?.value}
                  location={event.location?.isTBD ? null : event.location?.value}
                  status={getEventStatus(eventDate)}
                  pinned={event.pinned || false}
                  specialTags={event.specialTags || []}
                  resources={event.resources}
                />
              );
            })}
          </div>
        </div>
      </div>
    )}

    <!-- Upcoming Events -->
    {eventGroups.upcoming.length > 0 && (
      <div class="mb-16">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-3xl font-bold text-white mb-8 text-center border-b border-white/20 pb-4">
            <span class="bg-gradient-to-r from-cyan-400 to-teal-400 bg-clip-text text-transparent">
              Upcoming Events
            </span>
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {eventGroups.upcoming.map((event) => {
              const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
              return (
                <EventArticleCard
                  slug={event.slug.current}
                  title={event.title}
                  excerpt={getPlainTextExcerpt(event.description)}
                  date={eventDate}
                  time={event.time?.isTBD ? null : event.time?.value}
                  location={event.location?.isTBD ? null : event.location?.value}
                  status={getEventStatus(eventDate)}
                  pinned={event.pinned || false}
                  specialTags={event.specialTags || []}
                  resources={event.resources}
                />
              );
            })}
          </div>
        </div>
      </div>
    )}

    <!-- Past Events -->
    {eventGroups.past.length > 0 && (
      <div class="mb-16">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-3xl font-bold text-white mb-8 text-center border-b border-white/20 pb-4">
            <span class="bg-gradient-to-r from-gray-400 to-gray-600 bg-clip-text text-transparent">
              Past Events
            </span>
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {eventGroups.past.map((event) => {
              const eventDate = event.date?.isTBD ? null : (event.date?.value ? new Date(event.date.value) : null);
              return (
                <a 
                  href={`/events/${event.slug.current}`}
                  class="group bg-white/5 border border-white/10 rounded-lg p-4 backdrop-blur-sm hover:bg-white/10 transition-all duration-300 hover:scale-[1.02] hover:-translate-y-1 hover:shadow-lg"
                >
                  <div class="flex items-start justify-between mb-2">
                    <h3 class="text-white font-medium text-sm group-hover:text-blue-300 transition-colors duration-300 flex-1 mr-3">
                      {event.title}
                    </h3>
                    <div class="flex items-center gap-2 text-xs text-white/60">
                      {eventDate && (
                        <span class="bg-gray-400/20 border border-gray-400/30 px-1.5 py-0.5 rounded text-gray-400">
                          {eventDate.toLocaleDateString("en-us", { month: "short", day: "numeric" })}
                        </span>
                      )}
                    </div>
                  </div>
                  
                  {event.description && (
                    <p class="text-white/60 text-xs line-clamp-2 leading-relaxed">
                      {getPlainTextExcerpt(event.description)}
                    </p>
                  )}
                  
                  <div class="flex items-center justify-between mt-3">
                    <div class="flex items-center gap-3 text-xs text-white/50">
                      {event.time && !event.time.isTBD && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          {event.time.value}
                        </span>
                      )}
                      {event.location && !event.location.isTBD && (
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 12.414a4 4 0 10-1.414 1.414l4.243 4.243a1 1 0 001.414-1.414z"></path>
                          </svg>
                          {event.location.value}
                        </span>
                      )}
                    </div>
                    
                    <span class="text-xs text-blue-300 group-hover:text-blue-200 transition-colors duration-300">
                      View Details →
                    </span>
                  </div>
                </a>
              );
            })}
          </div>
        </div>
      </div>
    )}

    <!-- Call to Action -->
    <div class="max-w-4xl mx-auto text-center">
      <div class="bg-gradient-to-r from-blue-500/10 to-purple-500/10 border border-blue-500/20 rounded-2xl p-8 backdrop-blur-sm">
        <h3 class="text-2xl font-bold text-white mb-4">Stay Updated</h3>
        <p class="text-white/80 mb-6">
          Don't miss out on our upcoming events! Follow us or reach out using the links below.
        </p>
        <div class="flex flex-wrap gap-3 justify-center">
          {socialButtons.map((btn) => (
            <a href={btn.href} target={btn.key === 'email' ? undefined : "_blank"} rel={btn.key === 'email' ? undefined : "noopener noreferrer"}
              class={`px-5 py-2.5 rounded-lg font-medium transition-colors duration-300 border
                ${btn.key === 'discord' ? 'bg-indigo-600/90 hover:bg-indigo-600 border-indigo-400/40 text-white' : ''}
                ${btn.key === 'email' ? 'bg-white/10 hover:bg-white/20 border-white/20 text-white' : ''}
                ${btn.key === 'linkedin' ? 'bg-blue-600/30 hover:bg-blue-600/40 border-blue-400/40 text-white' : ''}
                ${btn.key === 'instagram' ? 'bg-pink-600/30 hover:bg-pink-600/40 border-pink-400/40 text-white' : ''}`}
            >
              {btn.label}
            </a>
          ))}
        </div>
      </div>
    </div>
  </Section>
</Layout>
