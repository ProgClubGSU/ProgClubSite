---
interface Props {
  slug: string;
  title: string;
  excerpt?: string;
  date?: Date;
  time?: string;
  location?: string;
  status: 'upcoming' | 'active' | 'past';
  pinned?: boolean;
  specialTags?: string[];
  resources?: Array<{
    type: string;
    label?: string;
    url?: string;
  }>;
  featured?: boolean;
}

const { 
  slug, 
  title, 
  excerpt, 
  date, 
  time, 
  location, 
  status, 
  pinned = false, 
  specialTags = [], 
  resources,
  featured = false
} = Astro.props;

// Format date for display
const formattedDate = date ? date.toLocaleDateString("en-us", { 
  month: "short", 
  day: "numeric",
  year: "numeric"
}) : null;

// Get status color and text
const statusConfig = {
  upcoming: { color: 'text-blue-400', bg: 'bg-blue-500/20', border: 'border-blue-400/30', text: 'Upcoming' },
  active: { color: 'text-green-400', bg: 'bg-green-500/20', border: 'border-green-400/30', text: 'Today' },
  past: { color: 'text-gray-400', bg: 'bg-gray-500/20', border: 'border-gray-400/30', text: 'Past' },
  tbd: { color: 'text-yellow-400', bg: 'bg-yellow-500/20', border: 'border-yellow-400/30', text: 'TBD' }
};

const statusStyle = statusConfig[status] || statusConfig.upcoming;
---

<article class="group relative overflow-hidden w-full">
  <a 
    href={`/events/${slug}`}
    class="block bg-white/5 border border-white/10 rounded-xl p-6 hover:bg-white/10 transition-all duration-300 hover:shadow-lg relative z-0 w-full h-64 overflow-hidden"
  >
    <!-- Compact Card Layout -->
    <div class="flex flex-col h-full">
      <!-- Header Section -->
      <div class="flex-shrink-0 mb-3">
        <!-- Status and Pinned Badges -->
        <div class="flex items-center justify-between mb-2">
          <div class="flex items-center gap-1">
            {pinned && (
              <span class="bg-yellow-500/20 border border-yellow-400/30 text-yellow-300 px-1.5 py-0.5 rounded-full text-xs font-medium">
                üìå
              </span>
            )}
            <span class={`${statusStyle.bg} ${statusStyle.border} ${statusStyle.color} px-1.5 py-0.5 rounded-full text-xs font-medium`}>
              {status === 'active' && 'üéâ '}
              {status === 'upcoming' && 'üìÖ '}
              {status === 'past' && '‚úÖ '}
              {status === 'tbd' && '‚ùì '}
              {statusStyle.text}
            </span>
          </div>
          
          {featured && (
            <span class="bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-400/30 text-purple-300 px-1.5 py-0.5 rounded-full text-xs font-medium">
              ‚≠ê
            </span>
          )}
        </div>

        <!-- Title -->
        <h3 class="text-lg font-bold text-white group-hover:text-blue-300 transition-colors duration-300 leading-tight mb-2 break-words line-clamp-2">
          {title}
        </h3>
      </div>

      <!-- Content Section (flexible) -->
      <div class="flex-1 flex flex-col min-h-0">
        <!-- Event Details -->
        <div class="space-y-2 mb-3 text-xs">
          <!-- Date and Time in one line -->
          {(date || time) && (
            <div class="flex items-center gap-2 text-white/80">
              {date && (
                <span class="flex items-center gap-1">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  {formattedDate}
                </span>
              )}
              {time && (
                <span class="flex items-center gap-1">
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  {time}
                </span>
              )}
            </div>
          )}

          <!-- Location -->
          {location && (
            <div class="flex items-center gap-1 text-white/80">
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 12.414a4 4 0 10-1.414 1.414l4.243 4.243a1 1 0 001.414-1.414z"></path>
              </svg>
              <span class="truncate">{location}</span>
            </div>
          )}
        </div>

        <!-- Excerpt -->
        {excerpt && (
          <p class="text-white/70 text-xs leading-relaxed line-clamp-2 mb-3">
            {excerpt}
          </p>
        )}

        <!-- Special Tags (compact) -->
        {specialTags.length > 0 && (
          <div class="mb-3">
            <div class="flex flex-wrap gap-1">
              {specialTags.slice(0, 2).map((tag) => (
                <span class="bg-purple-500/20 border border-purple-400/30 text-purple-300 px-1.5 py-0.5 rounded-full text-xs font-medium">
                  {typeof tag === 'string' ? tag : (tag?.title || tag?.name || String(tag))}
                </span>
              ))}
              {specialTags.length > 2 && (
                <span class="bg-white/10 text-white/70 px-1.5 py-0.5 rounded-full text-xs">
                  +{specialTags.length - 2}
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      <!-- Footer (fixed at bottom) -->
      <div class="flex-shrink-0 pt-3 border-t border-white/10">
        <div class="flex items-center justify-between">
          <div class="text-xs text-white/60">
            {resources && resources.length > 0 && `${resources.length} resource${resources.length !== 1 ? 's' : ''}`}
          </div>
          <div class="flex items-center gap-1 text-blue-300 group-hover:text-blue-200 transition-colors duration-300">
            <span class="text-xs font-medium">Read More</span>
            <svg class="w-3 h-3 group-hover:translate-x-0.5 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 