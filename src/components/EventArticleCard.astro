---
interface Props {
  slug: string;
  title: string;
  excerpt?: string;
  date?: Date;
  time?: string;
  location?: string;
  status: 'upcoming' | 'active' | 'past';
  pinned?: boolean;
  specialTags?: string[];
  resources?: Array<{
    type: string;
    label?: string;
    url?: string;
  }>;
  featured?: boolean;
}

const { 
  slug, 
  title, 
  excerpt, 
  date, 
  time, 
  location, 
  status, 
  pinned = false, 
  specialTags = [], 
  resources,
  featured = false
} = Astro.props;

// Format date for display
const formattedDate = date ? date.toLocaleDateString("en-us", { 
  month: "short", 
  day: "numeric",
  year: "numeric"
}) : null;

// Get status color and text
const statusConfig = {
  upcoming: { color: 'text-blue-400', bg: 'bg-blue-500/20', border: 'border-blue-400/30', text: 'Upcoming' },
  active: { color: 'text-green-400', bg: 'bg-green-500/20', border: 'border-green-400/30', text: 'Today' },
  past: { color: 'text-gray-400', bg: 'bg-gray-500/20', border: 'border-gray-400/30', text: 'Past' },
  tbd: { color: 'text-yellow-400', bg: 'bg-yellow-500/20', border: 'border-yellow-400/30', text: 'TBD' }
};

const statusStyle = statusConfig[status] || statusConfig.upcoming;
---

<article class="group relative overflow-hidden w-full">
  <a 
    href={`/events/${slug}`}
    class="block bg-white/5 border border-white/10 rounded-xl p-6 hover:bg-white/10 transition-all duration-300 hover:shadow-lg relative z-0 w-full overflow-hidden"
  >
    <!-- Header Section -->
    <header class="mb-4 relative">
      <!-- Status and Pinned Badges -->
      <div class="flex items-center justify-between mb-3">
        <div class="flex items-center gap-2">
          {pinned && (
            <span class="bg-yellow-500/20 border border-yellow-400/30 text-yellow-300 px-2 py-1 rounded-full text-xs font-medium">
              üìå Pinned
            </span>
          )}
          <span class={`${statusStyle.bg} ${statusStyle.border} ${statusStyle.color} px-2 py-1 rounded-full text-xs font-medium`}>
            {status === 'active' && 'üéâ '}
            {status === 'upcoming' && 'üìÖ '}
            {status === 'past' && '‚úÖ '}
            {status === 'tbd' && '‚ùì '}
            {statusStyle.text}
          </span>
        </div>
        
        {featured && (
          <span class="bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-400/30 text-purple-300 px-2 py-1 rounded-full text-xs font-medium">
            ‚≠ê Featured
          </span>
        )}
      </div>

      <!-- Title -->
      <h3 class="text-xl font-bold text-white group-hover:text-blue-300 transition-colors duration-300 leading-tight mb-2 break-words">
        {title}
      </h3>

      <!-- Excerpt -->
      {excerpt && (
        <p class="text-white/70 text-sm leading-relaxed line-clamp-2">
          {excerpt}
        </p>
      )}
    </header>

    <!-- Event Details -->
    <div class="space-y-3 mb-4">
      <!-- Date and Time -->
      {(date || time) && (
        <div class="flex items-center gap-3 text-sm">
          {date && (
            <div class="flex items-center gap-2 text-white/80">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span class="font-medium">{formattedDate}</span>
            </div>
          )}
          {time && (
            <div class="flex items-center gap-2 text-white/80">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>{time}</span>
            </div>
          )}
        </div>
      )}

      <!-- Location -->
      {location && (
        <div class="flex items-center gap-2 text-sm text-white/80">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 12.414a4 4 0 10-1.414 1.414l4.243 4.243a1 1 0 001.414-1.414z"></path>
          </svg>
          <span>{location}</span>
        </div>
      )}
    </div>

         <!-- Special Tags -->
     {specialTags.length > 0 && (
       <div class="mb-4">
         <div class="flex flex-wrap gap-2">
           {specialTags.map((tag) => (
             <span class="bg-purple-500/20 border border-purple-400/30 text-purple-300 px-2 py-1 rounded-full text-xs font-medium">
               {typeof tag === 'string' ? tag : (tag?.title || tag?.name || String(tag))}
             </span>
           ))}
         </div>
       </div>
     )}

    <!-- Resources Preview -->
    {resources && resources.length > 0 && (
      <div class="mb-4">
        <div class="flex items-center gap-2 text-xs text-white/60 mb-2">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
          </svg>
          <span>{resources.length} resource{resources.length !== 1 ? 's' : ''}</span>
        </div>
        <div class="flex flex-wrap gap-1">
          {resources.slice(0, 3).map((resource) => (
            <span class="bg-white/10 text-white/70 px-2 py-1 rounded text-xs">
              {resource.label || resource.type}
            </span>
          ))}
          {resources.length > 3 && (
            <span class="bg-white/10 text-white/70 px-2 py-1 rounded text-xs">
              +{resources.length - 3} more
            </span>
          )}
        </div>
      </div>
    )}

    <!-- Footer -->
    <footer class="flex items-center justify-between pt-4 border-t border-white/10">
      <div class="text-xs text-white/60">
        {status === 'upcoming' && 'Click to learn more'}
        {status === 'active' && 'Happening now!'}
        {status === 'past' && 'View event recap'}
      </div>
      <div class="flex items-center gap-2 text-blue-300 group-hover:text-blue-200 transition-colors duration-300">
        <span class="text-sm font-medium">Read More</span>
        <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </div>
    </footer>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 