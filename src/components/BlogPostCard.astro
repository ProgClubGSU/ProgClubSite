---
type Props = {
  title: string;
  slug: string;
  excerpt: string;
  date: Date | null;
  time?: string | null;
  location?: string | null;
  status?: 'upcoming' | 'active' | 'past';
  pinned?: boolean;
  specialTags?: Array<{
    _id: string;
    name: string;
    slug: { current: string };
    color: string;
    isActive: boolean;
  }>;
  resources?: any[];
};

const { title, slug, excerpt, date, time, location, status = 'upcoming', pinned = false, specialTags = [], resources } = Astro.props;

// Helper function to determine status based on date
function getEventStatus(date: Date | null): 'upcoming' | 'active' | 'past' {
  if (!date) return 'upcoming';
  
  const now = new Date();
  const eventDate = new Date(date);
  
  // Set event date to start of day for comparison
  eventDate.setHours(0, 0, 0, 0);
  const today = new Date(now);
  today.setHours(0, 0, 0, 0);
  
  if (eventDate < today) return 'past';
  if (eventDate.getTime() === today.getTime()) return 'active';
  return 'upcoming';
}

// Use provided status or calculate from date
const eventStatus = status || getEventStatus(date);

// Status configuration
const statusConfig = {
  upcoming: {
    text: 'UPCOMING',
    color: 'text-green-400',
    bgColor: 'bg-green-400/20',
    borderColor: 'border-green-400/30'
  },
  active: {
    text: 'TODAY',
    color: 'text-yellow-400',
    bgColor: 'bg-yellow-400/20',
    borderColor: 'border-yellow-400/30'
  },
  past: {
    text: 'PAST',
    color: 'text-gray-400',
    bgColor: 'bg-gray-400/20',
    borderColor: 'border-gray-400/30'
  },
  tbd: {
    text: 'TBD',
    color: 'text-orange-400',
    bgColor: 'bg-orange-400/20',
    borderColor: 'border-orange-400/30'
  }
};

const currentStatus = statusConfig[eventStatus] || statusConfig.upcoming;
---

<div
  class={`w-full mx-auto relative pb-5 overflow-hidden transition-all duration-300 ease-out cursor-pointer group h-64 rounded-xl shadow-lg hover:shadow-xl ${
    pinned 
      ? 'bg-gradient-to-br from-amber-500/[0.15] via-yellow-400/[0.10] to-amber-400/[0.08] border-2 border-amber-400/40 hover:border-amber-300/60 hover:shadow-amber-400/25 pinned-event-glow' 
      : 'border border-white/20 bg-gradient-to-br from-white/[0.08] via-white/[0.05] to-white/[0.02] hover:border-white/40'
  }`}
>
  <!-- Liquid Glass Background Effects -->
  <div class={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-700 rounded-xl ${
    pinned
      ? 'bg-gradient-to-br from-amber-400/15 via-yellow-400/8 to-amber-300/12'
      : 'bg-gradient-to-br from-white/[0.1] via-transparent to-transparent'
  }`}></div>
  
  {/* Floating Liquid Bubbles for Pinned Events */}
  {pinned && (
    <>
      <div class="absolute top-3 right-4 w-16 h-16 bg-gradient-to-br from-amber-400/25 to-yellow-500/25 rounded-full opacity-30 liquid-float"></div>
      <div class="absolute bottom-6 left-4 w-12 h-12 bg-gradient-to-br from-amber-400/20 to-yellow-400/20 rounded-full opacity-20 liquid-float" style="animation-delay: 1.5s;"></div>
      
      {/* Golden Sparkle Glares for Pinned Events */}
      <div class="absolute top-8 right-14 opacity-0 group-hover:opacity-80 transition-opacity duration-500 sparkle-glare sparkle-1" style="animation-delay: 0.3s;">
        <div class="sparkle-cross sparkle-sm bg-amber-200"></div>
      </div>
      <div class="absolute top-14 left-12 opacity-0 group-hover:opacity-70 transition-opacity duration-500 sparkle-glare sparkle-2" style="animation-delay: 0.8s;">
        <div class="sparkle-cross sparkle-xs bg-yellow-200"></div>
      </div>
      <div class="absolute bottom-14 right-6 opacity-0 group-hover:opacity-60 transition-opacity duration-500 sparkle-glare sparkle-3" style="animation-delay: 1.3s;">
        <div class="sparkle-cross sparkle-md bg-amber-300"></div>
      </div>
      <div class="absolute top-20 right-8 opacity-0 group-hover:opacity-75 transition-opacity duration-500 sparkle-glare sparkle-4" style="animation-delay: 1.8s;">
        <div class="sparkle-cross sparkle-xs bg-yellow-300"></div>
      </div>
      <div class="absolute bottom-20 left-8 opacity-0 group-hover:opacity-65 transition-opacity duration-500 sparkle-glare sparkle-5" style="animation-delay: 2.2s;">
        <div class="sparkle-cross sparkle-sm bg-amber-200"></div>
      </div>
      <div class="absolute top-12 left-20 opacity-0 group-hover:opacity-55 transition-opacity duration-500 sparkle-glare sparkle-6" style="animation-delay: 2.7s;">
        <div class="sparkle-cross sparkle-xs bg-yellow-200"></div>
      </div>
      <div class="absolute bottom-8 right-12 opacity-0 group-hover:opacity-70 transition-opacity duration-500 sparkle-glare sparkle-7" style="animation-delay: 3.1s;">
        <div class="sparkle-cross sparkle-sm bg-amber-300"></div>
      </div>
      <div class="absolute top-16 right-20 opacity-0 group-hover:opacity-50 transition-opacity duration-500 sparkle-glare sparkle-8" style="animation-delay: 3.5s;">
        <div class="sparkle-cross sparkle-xs bg-yellow-300"></div>
      </div>
    </>
  )}
  
  {/* Liquid Glass Morphing Shape for Pinned Events */}
  {pinned && (
    <div class="absolute top-0 right-0 w-24 h-24 bg-gradient-to-bl from-amber-300/[0.18] to-transparent transform translate-x-6 -translate-y-6 group-hover:scale-125 transition-transform duration-700 liquid-morph"></div>
  )}
  
  <!-- Browser window header with glass effect -->
  <div class={`relative flex items-center justify-start px-4 py-3 backdrop-blur-sm border-b ${
    pinned
      ? 'bg-gradient-to-r from-amber-500/[0.20] to-yellow-500/[0.12] border-amber-400/30'
      : 'bg-gradient-to-r from-white/[0.15] to-white/[0.08] border-white/20'
  }`}>
    <div class="flex space-x-2">
      <div class="w-3 h-3 rounded-full bg-black/80 group-hover:bg-red-500 transition-all duration-300 shadow-sm"></div>
      <div class="w-3 h-3 rounded-full bg-black/80 group-hover:bg-yellow-500 transition-all duration-300 shadow-sm"></div>
      <div class="w-3 h-3 rounded-full bg-black/80 group-hover:bg-green-500 transition-all duration-300 shadow-sm"></div>
    </div>
    <!-- Browser tab indicator -->
    <div class={`ml-4 h-1 w-16 rounded-full transition-all duration-300 ${
      pinned
        ? 'bg-gradient-to-r from-amber-400/60 to-yellow-500/60 group-hover:from-amber-400 group-hover:to-yellow-500'
        : 'bg-gradient-to-r from-blue-400/60 to-purple-400/60 group-hover:from-blue-400 group-hover:to-purple-400'
    }`}></div>
  </div>

  <!-- Content area with enhanced glass effect -->
  <div class="relative p-6 tracking-wider z-10">
    <a href={`/events/${slug}`} class="block group">
      <!-- Title and Status Row -->
      <div class="flex items-start justify-between mb-3">
        <h2 class={`text-xl font-medium text-white transition-colors duration-300 drop-shadow-sm flex-1 ${
          pinned 
            ? 'group-hover:text-amber-200' 
            : 'group-hover:text-blue-300'
        }`}>
          <span class={`text-white/70 mr-2 transition-colors duration-300 ${
            pinned 
              ? 'group-hover:text-amber-300' 
              : 'group-hover:text-blue-400'
          }`}>‚ùØ</span>
          {title}
        </h2>
        <!-- Status and Pinned Badge Row -->
        <div class="flex items-center gap-2">
          <!-- Status Badge -->
          <div class={`px-1.5 py-0.5 rounded text-xs font-bold uppercase tracking-wide ${currentStatus.bgColor} ${currentStatus.borderColor} border ${currentStatus.color} backdrop-blur-sm`}>
            {currentStatus.text}
          </div>
          <!-- Pinned Badge -->
          {pinned && (
            <div class="px-2 py-0.5 rounded-full bg-gradient-to-r from-amber-500/40 to-yellow-500/40 border border-amber-400/50 shadow-lg transition-shadow duration-300">
              <div class="flex items-center gap-1">
                <svg class="w-3 h-3 text-amber-200" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M3 3.5A1.5 1.5 0 014.5 2h11A1.5 1.5 0 0117 3.5v11A1.5 1.5 0 0115.5 16h-5.379a1.5 1.5 0 01-1.06-.44L3 9.5v-6z"/>
                </svg>
                <span class="text-xs font-medium text-amber-200 uppercase tracking-wide">PINNED</span>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <!-- Event Info Cards - Date, Time, Location -->
      <div class="flex gap-2 mb-4">
        <!-- Date Card -->
        <div class="flex items-center gap-1 px-2 py-1 rounded-md bg-white/[0.1] border border-white/20 backdrop-blur-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class={`h-3 w-3 ${pinned ? 'text-amber-300' : 'text-purple-300'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>
          <span class="text-xs font-medium text-white drop-shadow-sm">{date ? date.toLocaleDateString("en-us", { month: "short", day: "numeric" }) : 'TBD'}</span>
        </div>
        
        <!-- Time Card -->
        <div class="flex items-center gap-1 px-2 py-1 rounded-md bg-white/[0.1] border border-white/20 backdrop-blur-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class={`h-3 w-3 ${pinned ? 'text-amber-300' : 'text-purple-300'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
          <span class="text-xs font-medium text-white drop-shadow-sm">{time || 'TBD'}</span>
        </div>
        
        <!-- Location Card -->
        <div class="flex items-center gap-1 px-2 py-1 rounded-md bg-white/[0.1] border border-white/20 backdrop-blur-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class={`h-3 w-3 ${pinned ? 'text-amber-300' : 'text-purple-300'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 12.414a4 4 0 10-1.414 1.414l4.243 4.243a1 1 0 001.414-1.414z" /></svg>
          <span class="text-xs font-medium text-white drop-shadow-sm line-clamp-1">{location || 'TBD'}</span>
        </div>
      </div>
      
      <p class="text-white/80 text-sm font-thin mb-4 line-clamp-3 leading-relaxed">{excerpt}</p>
      
      <!-- Special Tags Row - Moved to bottom -->
      {specialTags && specialTags.length > 0 && (
        <div class="flex flex-wrap gap-1 mt-auto">
          {specialTags.filter(tag => tag.isActive).map((tag) => {
            const colorClasses = {
              purple: 'bg-purple-400/20 border-purple-400/30 text-purple-300',
              blue: 'bg-blue-400/20 border-blue-400/30 text-blue-300',
              green: 'bg-green-400/20 border-green-400/30 text-green-300',
              yellow: 'bg-yellow-400/20 border-yellow-400/30 text-yellow-300',
              red: 'bg-red-400/20 border-red-400/30 text-red-300',
              orange: 'bg-orange-400/20 border-orange-400/30 text-orange-300',
              pink: 'bg-pink-400/20 border-pink-400/30 text-pink-300',
              teal: 'bg-teal-400/20 border-teal-400/30 text-teal-300'
            };
            const tagColor = colorClasses[tag.color] || colorClasses.purple;
            
            return (
              <span class={`px-1.5 py-0.5 rounded text-xs font-medium ${tagColor} backdrop-blur-sm`}>
                {tag.name}
              </span>
            );
          })}
        </div>
      )}
    </a>
  </div>
  
  <!-- Liquid Glass Bottom Glow -->
  <div class={`absolute bottom-0 left-0 right-0 h-24 opacity-0 group-hover:opacity-100 transition-opacity duration-700 rounded-b-xl ${
    pinned
      ? 'bg-gradient-to-t from-amber-400/15 via-yellow-400/8 to-transparent'
      : 'bg-gradient-to-t from-purple-500/10 via-blue-500/5 to-transparent'
  }`}></div>
  
  <!-- Ambient Light Effect -->
  <div class={`absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-700 rounded-xl ${
    pinned
      ? 'bg-gradient-to-br from-amber-400/8 via-transparent to-amber-300/8'
      : 'bg-gradient-to-br from-blue-400/5 via-transparent to-purple-400/5'
  }`}></div>
</div>

<style>
  /* Liquid Glass Animations */
  @keyframes liquidFloat {
    0%, 100% {
      transform: translate(0, 0) scale(1);
    }
    33% {
      transform: translate(8px, -8px) scale(1.05);
    }
    66% {
      transform: translate(-4px, 4px) scale(0.95);
    }
  }

  @keyframes morphGlow {
    0%, 100% {
      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
      filter: blur(15px);
    }
    25% {
      border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
      filter: blur(20px);
    }
    50% {
      border-radius: 50% 60% 30% 60% / 30% 60% 70% 40%;
      filter: blur(25px);
    }
    75% {
      border-radius: 60% 40% 60% 30% / 70% 30% 60% 40%;
      filter: blur(18px);
    }
  }

  @keyframes goldenSparkle {
    0%, 100% {
      opacity: 0;
      transform: scale(0.5) rotate(0deg);
    }
    50% {
      opacity: 1;
      transform: scale(1) rotate(180deg);
    }
  }

  @keyframes sparkleGlare {
    0%, 100% {
      transform: scale(0.7) rotate(0deg);
      filter: brightness(1);
    }
    25% {
      transform: scale(1) rotate(45deg);
      filter: brightness(1.5);
    }
    50% {
      transform: scale(1.2) rotate(90deg);
      filter: brightness(2);
    }
    75% {
      transform: scale(1) rotate(135deg);
      filter: brightness(1.5);
    }
  }

  @keyframes sparkleGlare2 {
    0%, 100% {
      transform: scale(0.8) rotate(45deg);
      filter: brightness(1.2);
    }
    33% {
      transform: scale(1.1) rotate(135deg);
      filter: brightness(1.8);
    }
    66% {
      transform: scale(0.9) rotate(225deg);
      filter: brightness(1.4);
    }
  }

  @keyframes sparkleGlare3 {
    0%, 100% {
      transform: scale(0.6) rotate(90deg);
      filter: brightness(1);
    }
    40% {
      transform: scale(1.3) rotate(180deg);
      filter: brightness(2.2);
    }
    80% {
      transform: scale(0.8) rotate(270deg);
      filter: brightness(1.3);
    }
  }

  /* Pinned Event Glow Effect */
  .pinned-event-glow {
    position: relative;
  }

  .pinned-event-glow::before {
    content: '';
    position: absolute;
    inset: -2px;
    background: linear-gradient(45deg, #f59e0b, #eab308, #fbbf24, #f59e0b);
    border-radius: inherit;
    opacity: 0;
    z-index: -1;
    transition: opacity 0.7s ease;
    animation: pinnedPulse 5s infinite ease-in-out;
  }

  .pinned-event-glow:hover::before {
    opacity: 0.3;
  }

  @keyframes pinnedPulse {
    0%, 100% {
      opacity: 0.05;
      transform: scale(1);
    }
    50% {
      opacity: 0.12;
      transform: scale(1.003);
    }
  }

  .liquid-morph {
    animation: morphGlow 6s ease-in-out infinite;
  }

  .liquid-float {
    animation: liquidFloat 5s ease-in-out infinite;
  }

  .golden-sparkle {
    animation: goldenSparkle 2s infinite;
  }

  /* Reusable Sparkle Cross Styles */
  .sparkle-cross {
    position: relative;
    display: block;
  }
  
  .sparkle-cross::before,
  .sparkle-cross::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    background-color: inherit;
    transform: translate(-50%, -50%);
  }
  
  .sparkle-cross::before {
    transform: translate(-50%, -50%) rotate(45deg);
  }
  
  .sparkle-cross::after {
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  /* Sparkle Sizes */
  .sparkle-xs {
    width: 8px;
    height: 8px;
  }
  
  .sparkle-xs::before,
  .sparkle-xs::after {
    width: 8px;
    height: 2px;
  }

  .sparkle-sm {
    width: 12px;
    height: 12px;
  }
  
  .sparkle-sm::before,
  .sparkle-sm::after {
    width: 12px;
    height: 2px;
  }

  .sparkle-md {
    width: 16px;
    height: 16px;
  }
  
  .sparkle-md::before,
  .sparkle-md::after {
    width: 16px;
    height: 3px;
  }

  /* Performance-optimized sparkle animations */
  .sparkle-glare {
    will-change: transform, filter;
  }

  .sparkle-1, .sparkle-4, .sparkle-7 {
    animation: sparkleGlare 4s infinite ease-in-out;
  }
  
  .sparkle-2, .sparkle-5, .sparkle-8 {
    animation: sparkleGlare2 3.5s infinite ease-in-out;
  }
  
  .sparkle-3, .sparkle-6 {
    animation: sparkleGlare3 4.5s infinite ease-in-out;
  }

  /* Enhanced glass blur effect */
  .liquid-glass {
    backdrop-filter: blur(16px) saturate(180%);
    -webkit-backdrop-filter: blur(16px) saturate(180%);
  }
</style>
