---
import { Image } from "astro:assets";
import HeroImg from "@/hero.png";
import { QUOTE, SITE_TITLE } from "@/consts";
---

<div class="hero-bg hidden md:block h-screen hero-bg-animate absolute top-0"></div>
<section
  class="h-screen !z-[20] relative w-full grid grid-cols-1 grid-rows-1 sm:grid-cols-2 md:grid-cols-2 gap-4 items-center"
  id="hero"
>
  <div class="grid place-items-center">
    <div class="text-center -mt-10">
      <h1 class="font-bold text-7xl glitch-title" data-text="{`<${SITE_TITLE} />`}">{`<${SITE_TITLE} />`}</h1>
      <h2 class="text-2xl opacity-95 text-white">
        do cool stuff. build cool sh*t
      </h2>
    </div>
  </div>
  <div>
    <Image
      alt="Hero"
      src={HeroImg}
      class="brightness-200 w-full scale-90 invert"
    />
  </div>
</section>

<script>
  // Global variables to track initialization
  let heroAnimationInitialized = false;
  let heroInterval = null;
  let glitchIntervals = new Map(); // Track glitch intervals for each character



  // Ensure DOM is loaded before initializing animations
  function initHeroAnimation() {
    // Don't reinitialize if already done
    if (heroAnimationInitialized) return;
    
    const hero_bg = document.querySelector(".hero-bg-animate");
    if (!hero_bg) {
      // Retry after a short delay if element not found
      setTimeout(initHeroAnimation, 100);
      return;
    }

    // Clear any existing interval
    if (heroInterval) {
      clearInterval(heroInterval);
    }

    // Initialize with first binary text
    let binaryText = "";
    for (let i = 0; i < 1500; i++) {
      binaryText += Math.floor(Math.random() * 2).toString();
    }
    hero_bg.textContent = binaryText;
    
    // Make visible after content is set
    hero_bg.style.color = "rgba(255, 255, 255, 0.4)";
    hero_bg.style.textShadow = "0 0 10px rgba(255, 255, 255, 0.2)";

    // Start the interval - faster updates for more dynamic effect
    heroInterval = setInterval(() => {
      let binaryText = "";
      for (let i = 0; i < 1500; i++) {
        binaryText += Math.floor(Math.random() * 2).toString();
      }
      hero_bg.textContent = binaryText;
    }, 250);

    // Mark as initialized
    heroAnimationInitialized = true;
  }

  // Initialize glitch effect on title
  function initGlitchEffect() {
    const title = document.querySelector('.glitch-title');
    if (!title) {
      setTimeout(initGlitchEffect, 100);
      return;
    }

    // Split title into individual characters
    const originalText = title.textContent;
    const characters = originalText.split('');
    
    // Create spans for each character
    title.innerHTML = '';
    characters.forEach((char, index) => {
      const span = document.createElement('span');
      span.textContent = char;
      span.className = 'glitch-char';
      span.dataset.original = char;
      span.dataset.index = index;
      title.appendChild(span);
    });

    // Add hover effects to each character
    const charSpans = title.querySelectorAll('.glitch-char');
    charSpans.forEach((span, index) => {
      span.addEventListener('mouseenter', () => {
        startGlitchEffect(span);
      });
      
      span.addEventListener('mouseleave', () => {
        stopGlitchEffect(span);
      });
    });
  }

  // Start glitch effect for a character
  function startGlitchEffect(span) {
    const originalChar = span.dataset.original;
    const symbols = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', '+', '[', ']', '{', '}', '|', '\\', ':', ';', '"', "'", '<', '>', ',', '.', '?', '/', '~', '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
    
    // Clear any existing interval for this character
    if (glitchIntervals.has(span)) {
      clearInterval(glitchIntervals.get(span));
    }
    
    // Add glitching class for visual effect
    span.classList.add('glitching');
    
    // Start new glitch interval
    const interval = setInterval(() => {
      if (Math.random() > 0.3) { // 70% chance to show random symbol
        span.textContent = symbols[Math.floor(Math.random() * symbols.length)];
      } else { // 30% chance to show original character
        span.textContent = originalChar;
      }
    }, 50); // Update every 50ms for fast glitch effect
    
    glitchIntervals.set(span, interval);
  }

  // Stop glitch effect for a character
  function stopGlitchEffect(span) {
    if (glitchIntervals.has(span)) {
      clearInterval(glitchIntervals.get(span));
      glitchIntervals.delete(span);
    }
    // Remove glitching class
    span.classList.remove('glitching');
    // Restore original character
    span.textContent = span.dataset.original;
  }

  // Function to reset hero animation for navigation
  function resetHeroAnimation() {
    heroAnimationInitialized = false;
    
    // Clear existing intervals
    if (heroInterval) {
      clearInterval(heroInterval);
      heroInterval = null;
    }
    
    // Clear all glitch intervals
    glitchIntervals.forEach(interval => clearInterval(interval));
    glitchIntervals.clear();
    
    // Reinitialize after a short delay
    setTimeout(() => {
      initHeroAnimation();
      initGlitchEffect();
    }, 50);
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initHeroAnimation();
      initGlitchEffect();
    });
  } else {
    initHeroAnimation();
    initGlitchEffect();
  }

  // Listen for Astro navigation events
  document.addEventListener('astro:page-load', resetHeroAnimation);
  document.addEventListener('astro:after-swap', resetHeroAnimation);
  document.addEventListener('astro:effects-reset', resetHeroAnimation);

  // Also initialize on page visibility change (for when user returns to tab)
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      // Re-initialize animation when page becomes visible
      setTimeout(resetHeroAnimation, 100);
    }
  });

  // Fallback: also listen for popstate (browser back/forward)
  window.addEventListener('popstate', () => {
    setTimeout(resetHeroAnimation, 100);
  });
</script>
