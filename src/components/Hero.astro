---
import { QUOTE, SITE_TITLE } from "@/consts";
---

<div class="hero-bg hidden md:block h-[60vh] hero-bg-animate absolute top-0"></div>
<section
  class="h-[60vh] !z-[20] relative w-full flex flex-col items-center justify-center"
  id="hero"
>
  <div class="text-center space-y-6">
    <!-- Logo -->
    <div class="flex justify-center mb-8">
      <img
        src="/progsu-logo.png"
        alt="progsu Logo"
        class="w-48 h-48 md:w-64 md:h-64 object-contain filter drop-shadow-2xl hover:scale-105 transition-transform duration-300"
      />
    </div>
    
    <!-- Title -->
    <h1 class="font-bold text-5xl md:text-6xl glitch-title" data-text="{`<${SITE_TITLE} />`}">{`<${SITE_TITLE} />`}</h1>
    
    <!-- Tagline -->
    <h2 class="text-xl md:text-2xl opacity-90 text-white/80 font-light">
      Georgia State University Programming Club
    </h2>
  </div>
</section>

<script>
  // Simplified glitch effect for title only
  let glitchIntervals = new Map();

  // Initialize glitch effect on title
  function initGlitchEffect() {
    const title = document.querySelector('.glitch-title');
    if (!title) {
      setTimeout(initGlitchEffect, 100);
      return;
    }

    // Split title into individual characters
    const originalText = title.textContent;
    const characters = originalText.split('');
    
    // Create spans for each character
    title.innerHTML = '';
    characters.forEach((char, index) => {
      const span = document.createElement('span');
      span.textContent = char;
      span.className = 'glitch-char';
      span.dataset.original = char;
      span.dataset.index = index;
      title.appendChild(span);
    });

    // Add hover effects to each character
    const charSpans = title.querySelectorAll('.glitch-char');
    charSpans.forEach((span, index) => {
      span.addEventListener('mouseenter', () => {
        startGlitchEffect(span);
      });
      
      span.addEventListener('mouseleave', () => {
        stopGlitchEffect(span);
      });
    });
  }

  // Start glitch effect for a character
  function startGlitchEffect(span) {
    const originalChar = span.dataset.original;
    const symbols = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '=', '+', '[', ']', '{', '}', '|', '\\', ':', ';', '"', "'", '<', '>', ',', '.', '?', '/', '~', '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
    
    // Clear any existing interval for this character
    if (glitchIntervals.has(span)) {
      clearInterval(glitchIntervals.get(span));
    }
    
    // Add glitching class for visual effect
    span.classList.add('glitching');
    
    // Start new glitch interval
    const interval = setInterval(() => {
      if (Math.random() > 0.3) { // 70% chance to show random symbol
        span.textContent = symbols[Math.floor(Math.random() * symbols.length)];
      } else { // 30% chance to show original character
        span.textContent = originalChar;
      }
    }, 50); // Update every 50ms for fast glitch effect
    
    glitchIntervals.set(span, interval);
  }

  // Stop glitch effect for a character
  function stopGlitchEffect(span) {
    if (glitchIntervals.has(span)) {
      clearInterval(glitchIntervals.get(span));
      glitchIntervals.delete(span);
    }
    // Remove glitching class
    span.classList.remove('glitching');
    // Restore original character
    span.textContent = span.dataset.original;
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGlitchEffect);
  } else {
    initGlitchEffect();
  }

  // Listen for Astro navigation events
  document.addEventListener('astro:page-load', initGlitchEffect);
  document.addEventListener('astro:after-swap', initGlitchEffect);
</script>
