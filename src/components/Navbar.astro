---
import { SITE_TITLE, NAV_LINKS as links } from "@/consts";
---

<nav class="w-full !z-[9999] py-5 px-4 bg-black/50 backdrop-blur-sm relative">
  <div class="w-full flex justify-between items-center">
    <!-- Logo -->
    <a href="/">
      <div
        id="logo"
        class="pt-2 pb-1 !grid !place-items-center select-none leading-none hover:bg-black bg-white scale-110 hover:text-white text-black px-4 transition-all ease-in-out"
      >
        {SITE_TITLE}
      </div>
    </a>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex items-center gap-4">
      <div>/</div>
      {
        links.map((link) => {
          const href =
            link.href ?? link.title.toLowerCase().replaceAll(" ", "-");
          const pathname = Astro.url.pathname.replace(
            import.meta.env.BASE_URL,
            "",
          );
          const subpath = pathname.match(/[^\/]+/g);
          const isActive =
            href === pathname || href === "/" + (subpath?.[0] || "");
          
          // Check if href is an absolute URL (external link)
          const isExternalLink = href.startsWith("http://") || href.startsWith("https://");
          const finalHref = isExternalLink ? href : `/${href}`;
          
          // Check if this link has children (dropdown)
          if (link.children && link.children.length > 0) {
            return (
              <>
                <div class="relative group">
                  <button
                    class:list={[{ "bg-white text-black": isActive }]}
                    class="hover:bg-white hover:text-black transition-all ease-in-out px-2 max-w-fit flex items-center gap-1"
                  >
                    <div>{link.title}</div>
                    <svg class="w-3 h-3 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </button>
                  <div class="absolute top-full left-0 mt-1 bg-black/95 backdrop-blur-md border border-white/20 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 min-w-[120px] z-50">
                    {link.children.map((child) => {
                      const childHref = child.href ?? child.title.toLowerCase().replaceAll(" ", "-");
                      const childPathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
                      const childSubpath = childPathname.match(/[^\/]+/g);
                      const childIsActive = childHref === childPathname || childHref === "/" + (childSubpath?.[0] || "");
                      const childIsExternalLink = childHref.startsWith("http://") || childHref.startsWith("https://");
                      const childFinalHref = childIsExternalLink ? childHref : `/${childHref}`;
                      
                      return (
                        <a
                          class:list={[{ "bg-white text-black": childIsActive }]}
                          class="block hover:bg-white hover:text-black transition-all ease-in-out px-3 py-2 text-sm whitespace-nowrap"
                          href={childFinalHref}
                          target={childIsExternalLink ? "_blank" : undefined}
                          rel={childIsExternalLink ? "noopener noreferrer" : undefined}
                        >
                          {child.title}
                        </a>
                      );
                    })}
                  </div>
                </div>
                <div>/</div>
              </>
            );
          }
          
          return (
            <>
              <a
                class:list={[{ "bg-white text-black": isActive }]}
                class="hover:bg-white hover:text-black transition-all ease-in-out px-2 max-w-fit"
                href={finalHref}
                target={isExternalLink ? "_blank" : undefined}
                rel={isExternalLink ? "noopener noreferrer" : undefined}
              >
                <div>
                  {link.title === "Join" ? (<span><span aria-label="love" role="img">❤️</span> Join</span>) : link.title}
                </div>
              </a>
              <div>/</div>
            </>
          );
        })
      }
    </div>

    <!-- Mobile Hamburger Button -->
    <button
      id="hamburger-btn"
      class="md:hidden flex justify-center items-center w-8 h-8 text-white hover:bg-white/10 rounded transition-colors relative z-10"
      aria-label="Toggle mobile menu"
      aria-expanded="false"
    >
      <div class="relative w-6 h-4 flex flex-col justify-center items-center">
        <span id="hamburger-line-1" class="absolute w-6 h-0.5 bg-white transition-all duration-300 origin-center" style="top: 0;"></span>
        <span id="hamburger-line-2" class="absolute w-6 h-0.5 bg-white transition-all duration-300 origin-center" style="top: 50%; transform: translateY(-50%);"></span>
        <span id="hamburger-line-3" class="absolute w-6 h-0.5 bg-white transition-all duration-300 origin-center" style="bottom: 0;"></span>
      </div>
    </button>
  </div>

  <!-- Mobile Dropdown Menu -->
  <div
    id="mobile-menu"
    class="md:hidden absolute top-full left-0 right-0 bg-black/95 backdrop-blur-md transform translate-y-0 scale-y-0 origin-top opacity-0 transition-all duration-300 ease-out pointer-events-none overflow-hidden"
    aria-hidden="true"
  >
    <div class="px-4 py-6 space-y-3">
      {
        links.map((link) => {
          const href =
            link.href ?? link.title.toLowerCase().replaceAll(" ", "-");
          const pathname = Astro.url.pathname.replace(
            import.meta.env.BASE_URL,
            "",
          );
          const subpath = pathname.match(/[^\/]+/g);
          const isActive =
            href === pathname || href === "/" + (subpath?.[0] || "");
          
          // Check if href is an absolute URL (external link)
          const isExternalLink = href.startsWith("http://") || href.startsWith("https://");
          const finalHref = isExternalLink ? href : `/${href}`;
          
          // Check if this link has children (dropdown)
          if (link.children && link.children.length > 0) {
            return (
              <>
                <button
                  class="mobile-nav-link mobile-dropdown-btn w-full hover:bg-white hover:text-black transition-all ease-in-out px-4 py-3 rounded text-lg text-center flex items-center justify-center gap-2"
                  tabindex="-1"
                  data-dropdown-target={link.title.toLowerCase()}
                >
                  <span>{link.title}</span>
                  <svg class="w-4 h-4 transition-transform mobile-dropdown-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div class="mobile-dropdown-content overflow-hidden transition-all duration-300 max-h-0" data-dropdown={link.title.toLowerCase()}>
                  <div class="py-2 space-y-1">
                    {link.children.map((child) => {
                      const childHref = child.href ?? child.title.toLowerCase().replaceAll(" ", "-");
                      const childPathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
                      const childSubpath = childPathname.match(/[^\/]+/g);
                      const childIsActive = childHref === childPathname || childHref === "/" + (childSubpath?.[0] || "");
                      const childIsExternalLink = childHref.startsWith("http://") || childHref.startsWith("https://");
                      const childFinalHref = childIsExternalLink ? childHref : `/${childHref}`;
                      
                      return (
                        <a
                          class:list={[{ "bg-white text-black": childIsActive }]}
                          class="mobile-nav-link block hover:bg-white hover:text-black transition-all ease-in-out px-8 py-2 rounded text-base mx-2"
                          href={childFinalHref}
                          target={childIsExternalLink ? "_blank" : undefined}
                          rel={childIsExternalLink ? "noopener noreferrer" : undefined}
                          tabindex="-1"
                        >
                          {child.title}
                        </a>
                      );
                    })}
                  </div>
                </div>
              </>
            );
          }
          
          return (
            <a
              class:list={[{ "bg-white text-black": isActive }]}
              class="mobile-nav-link block hover:bg-white hover:text-black transition-all ease-in-out px-4 py-3 rounded text-lg text-center"
              href={finalHref}
              target={isExternalLink ? "_blank" : undefined}
              rel={isExternalLink ? "noopener noreferrer" : undefined}
              tabindex="-1"
            >
              {link.title === "Join" ? (<span><span aria-label="love" role="img">❤️</span> Join</span>) : link.title}
            </a>
          );
        })
      }
    </div>
  </div>
</nav>

<script>
  // Use a more efficient approach with proper state management
  class MobileNavbar {
    private hamburgerBtn: HTMLElement | null;
    private mobileMenu: HTMLElement | null;
    private hamburgerLines: NodeListOf<HTMLElement>;
    private mobileLinks: NodeListOf<HTMLElement>;
    private mobileDropdownBtns: NodeListOf<HTMLElement>;
    private isOpen: boolean = false;
    private logo: HTMLElement | null;

    constructor() {
      this.hamburgerBtn = document.getElementById("hamburger-btn");
      this.mobileMenu = document.getElementById("mobile-menu");
      this.hamburgerLines = document.querySelectorAll("#hamburger-btn span");
      this.mobileLinks = document.querySelectorAll(".mobile-nav-link");
      this.mobileDropdownBtns = document.querySelectorAll(".mobile-dropdown-btn");
      this.logo = document.getElementById("logo");
      
      this.init();
    }

    private init(): void {
      // Set up event listeners
      this.hamburgerBtn?.addEventListener("click", this.toggle.bind(this));
      
      // Keyboard support
      document.addEventListener("keydown", this.handleKeydown.bind(this));
      
      // Click outside to close
      document.addEventListener("click", this.handleOutsideClick.bind(this));
      
      // Close menu when clicking on links (but not dropdown buttons)
      this.mobileLinks.forEach(link => {
        if (!link.classList.contains("mobile-dropdown-btn")) {
          link.addEventListener("click", this.close.bind(this));
        }
      });

      // Handle mobile dropdown toggles
      this.mobileDropdownBtns.forEach(btn => {
        btn.addEventListener("click", this.toggleMobileDropdown.bind(this));
      });

      // Logo scroll effect with throttling
      this.initLogoScrollEffect();
    }

    private toggle(): void {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    private open(): void {
      if (!this.mobileMenu || this.isOpen) return;
      
      this.isOpen = true;
      
      // Update accessibility
      this.hamburgerBtn?.setAttribute("aria-expanded", "true");
      this.mobileMenu.setAttribute("aria-hidden", "false");
      
      // Show menu with animation
      this.mobileMenu.classList.remove("scale-y-0", "opacity-0", "pointer-events-none");
      this.mobileMenu.classList.add("scale-y-100", "opacity-100", "pointer-events-auto");
      
      // Enable tab navigation for menu items
      this.mobileLinks.forEach(link => {
        link.setAttribute("tabindex", "0");
      });
      
             // Animate hamburger to X
       if (this.hamburgerLines.length >= 3) {
         this.hamburgerLines[0].style.transform = "translateY(8px) rotate(45deg)";
         this.hamburgerLines[1].style.opacity = "0";
         this.hamburgerLines[2].style.transform = "translateY(-6px) rotate(-45deg)";
       }
      
      // Prevent body scroll
      document.body.style.overflow = "hidden";
    }

    private close(): void {
      if (!this.mobileMenu || !this.isOpen) return;
      
      this.isOpen = false;
      
      // Update accessibility
      this.hamburgerBtn?.setAttribute("aria-expanded", "false");
      this.mobileMenu.setAttribute("aria-hidden", "true");
      
      // Hide menu with animation
      this.mobileMenu.classList.remove("scale-y-100", "opacity-100", "pointer-events-auto");
      this.mobileMenu.classList.add("scale-y-0", "opacity-0", "pointer-events-none");
      
      // Disable tab navigation for menu items
      this.mobileLinks.forEach(link => {
        link.setAttribute("tabindex", "-1");
      });
      
      // Close all mobile dropdowns
      this.closeAllMobileDropdowns();
      
      // Reset hamburger animation
      if (this.hamburgerLines.length >= 3) {
        this.hamburgerLines[0].style.transform = "";
        this.hamburgerLines[1].style.opacity = "";
        this.hamburgerLines[2].style.transform = "";
      }
      
      // Restore body scroll
      document.body.style.overflow = "";
    }

    private toggleMobileDropdown(e: Event): void {
      const button = e.currentTarget as HTMLElement;
      const target = button.getAttribute("data-dropdown-target");
      const dropdown = document.querySelector(`[data-dropdown="${target}"]`) as HTMLElement;
      const arrow = button.querySelector(".mobile-dropdown-arrow") as HTMLElement;
      
      if (!dropdown || !arrow) return;
      
      const isOpen = dropdown.style.maxHeight && dropdown.style.maxHeight !== "0px";
      
      if (isOpen) {
        // Close dropdown
        dropdown.style.maxHeight = "0px";
        arrow.style.transform = "";
      } else {
        // Close other dropdowns first
        this.closeAllMobileDropdowns();
        
        // Open this dropdown
        dropdown.style.maxHeight = dropdown.scrollHeight + "px";
        arrow.style.transform = "rotate(180deg)";
      }
    }

    private closeAllMobileDropdowns(): void {
      const allDropdowns = document.querySelectorAll(".mobile-dropdown-content") as NodeListOf<HTMLElement>;
      const allArrows = document.querySelectorAll(".mobile-dropdown-arrow") as NodeListOf<HTMLElement>;
      
      allDropdowns.forEach(dropdown => {
        dropdown.style.maxHeight = "0px";
      });
      
      allArrows.forEach(arrow => {
        arrow.style.transform = "";
      });
    }

    private handleKeydown(e: KeyboardEvent): void {
      if (e.key === "Escape" && this.isOpen) {
        this.close();
        this.hamburgerBtn?.focus(); // Return focus to hamburger button
      }
    }

    private handleOutsideClick(e: Event): void {
      const target = e.target as Node;
      if (this.isOpen && 
          this.mobileMenu && 
          !this.mobileMenu.contains(target) && 
          !this.hamburgerBtn?.contains(target)) {
        this.close();
      }
    }

    private initLogoScrollEffect(): void {
      let ticking = false;
      
      const updateLogo = () => {
        if (!this.logo) return;
        
        if (window.scrollY > 100) {
          this.logo.className =
            "pt-2 pb-1 !grid !place-items-center select-none leading-none hover:bg-white bg-black scale-100 hover:text-black text-white px-4 transition-all ease-in-out";
        } else {
          this.logo.className =
            "pt-2 pb-1 !grid !place-items-center select-none leading-none hover:bg-black bg-white scale-110 hover:text-white text-black px-4 transition-all ease-in-out";
        }
        
        ticking = false;
      };

      const requestLogoUpdate = () => {
        if (!ticking) {
          requestAnimationFrame(updateLogo);
          ticking = true;
        }
      };

      window.addEventListener("scroll", requestLogoUpdate, { passive: true });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => new MobileNavbar());
  } else {
    new MobileNavbar();
  }
</script>
