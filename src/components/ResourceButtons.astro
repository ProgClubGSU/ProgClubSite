---
interface Resource {
  type: string;
  label?: string;
  url?: string;
}

interface Props {
  resources: Resource[];
  class?: string;
}

const { resources, class: extraClass = "" } = Astro.props;

const getButtonColor = (type: string) => {
  switch (type.toLowerCase()) {
    case 'video': return 'bg-blue-600 hover:bg-blue-700';
    case 'slides': return 'bg-green-600 hover:bg-green-700';
    case 'recording': return 'bg-purple-600 hover:bg-purple-700';
    case 'article': return 'bg-orange-600 hover:bg-orange-700';
    default: return 'bg-gray-600 hover:bg-gray-700';
  }
};
---

<div class={`flex flex-wrap ${extraClass.includes('compact') ? 'gap-1' : 'gap-3'}`.trim()}>
  {resources && resources.map((resource) => (
    resource && typeof resource === 'object' && resource.type ? (
      resource.url ? (
        <a 
          href={resource.url} 
          target="_blank" 
          class={`${getButtonColor(resource.type)} text-white ${extraClass.includes('compact') ? 'px-2 py-1 text-xs' : 'px-4 py-2'} rounded transition-colors`}
        >
          {resource.label || resource.type}
        </a>
      ) : (
        <span class={`bg-gray-600 text-white ${extraClass.includes('compact') ? 'px-2 py-1 text-xs' : 'px-4 py-2'} rounded opacity-50`}>
          {resource.label || resource.type} (Coming Soon)
        </span>
      )
    ) : null
  ))}
</div> 